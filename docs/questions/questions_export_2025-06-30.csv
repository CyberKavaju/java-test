ID,Domain,Topic,Question,Option A,Option B,Option C,Option D,Option E,Correct Answer,Explanation,Created At
25,Working With Java Data Types,Primitive Casting and Overflow,"What is the output of the following code?

```java
int i = 258;
byte b = (byte) i;
System.out.println(b);

```",258,2,0,-2,Compilation error,B,"Casting an int to a byte results in overflow when the value exceeds the byte range (-128 to 127).

The value 258 in binary is truncated to fit in 8 bits, which gives us 2.

Specifically, 258 modulo 256 equals 2, so the byte value is 2.",2025-06-19 19:10:39
26,Using Operators and Decision Constructs,Nested if/else,"What does the following code print?

```java
int x = 5, y = 3;
if (x < 10)
    if (y < 5)
        System.out.println(""A"");
else
    System.out.println(""B"");

```",A,B,Nothing,Compile error,Runtime exception,A,"The else clause pairs with the nearest if statement.

Here, x < 10 (true) and y < 5 (true) are both true, so it prints ""A"".

The else belongs to the inner if (y < 5).

If y were >= 5, it would print ""B""; if x were >= 10, nothing would be printed.",2025-06-19 19:10:39
27,Working With Java Data Types,Wrapper Caching,"What is the output of the following code?

```java
Integer i1 = 100, i2 = 100;
System.out.println(i1 == i2);
Integer i3 = 128, i4 = 128;
System.out.println(i3 == i4);

```",true true,true false,false true,false false,Compile error,B,"Java caches Integer objects for values in the range -128 to 127 for performance optimization.

Thus i1 and i2 refer to the same cached object (true), but i3 and i4 are outside the cache range and refer to different objects (false).

For values outside the cache range, new Integer objects are created.",2025-06-19 19:10:39
28,Using Loop Constructs,Enhanced For Loop,"What is the output of the following code?

```java
int[] arr = {1, 2, 3};
for (int x : arr) {
    x++;
}
System.out.println(arr[0]);

```",1,2,3,4,Compile error,A,"In an enhanced for loop (for-each), the loop variable x is a copy of the array element, not a reference to it.

Incrementing x does not change the original array elements.

Therefore, arr[0] remains 1.

To modify array elements, you would need to use a traditional for loop with indices.",2025-06-19 19:10:39
29,Working With Java Data Types,Autoboxing and NullPointerException,"What happens when the following code is executed?

```java
Integer i = null;
int j = i;

```",j will be 0,j will be null,Compilation error,Runtime NullPointerException,j will be uninitialized,D,"When assigning a wrapper object (Integer) to a primitive (int), automatic unboxing occurs.

Since i is null, attempting to unbox it throws a `NullPointerException` at runtime.

Primitives cannot be null, so the unboxing operation fails.",2025-06-19 19:10:39
30,Using Loop Constructs,Break Statement,"What is the output of the following code?

```java
for (int i = 0; i < 3; i++) {
    if (i == 1) break;
    System.out.print(i);
}

```",012,01,0,1,Compile error,C,"When i becomes 1, the break statement immediately terminates the loop.

The loop prints i for i=0, then when i becomes 1, the break executes before the print statement, so only 0 is printed.

The loop never reaches i=2.",2025-06-19 19:10:39
31,Java Basics,Import Statements,"What happens when compiling and running the following code?

```java
import java.util.Date;
import java.sql.Date;
class Test {
    public static void main(String[] args) {
        Date d = new Date();
    }
}

```",It prints the current date.,Compilation error: reference to Date is ambiguous.,Compilation error: cannot find symbol Date.,It prints 'null'.,Runtime exception (NullPointerException) is thrown.,B,"Two imports bring in classes named Date from different packages (java.util.Date and java.sql.Date), making the reference to Date ambiguous.

The code fails to compile because the compiler cannot determine which Date class to use.

To fix this, you would need to use fully qualified names or import only one of the Date classes.",2025-06-19 19:10:39
32,Using Loop Constructs,do-while Loop,"What does the following code print?

```java
int i = 3;
do {
    System.out.println(i);
} while (i < 3);

```",3,Nothing (no output),Infinite loop,Compile error,Runtime error,A,"A do-while loop executes its body at least once before checking the condition.

Here i=3, so it prints 3 once.

Then the condition (i < 3) is evaluated, which is false, so the loop terminates.

The key difference from a while loop is that do-while guarantees at least one execution.",2025-06-19 19:10:39
33,Using Operators and Decision Constructs,Switch Statement Fall-Through,"What is the output of the following code?

```java
int i = 1;
switch (i) {
    case 1: System.out.println(""One"");
    case 2: System.out.println(""Two"");
}

```",One Two,One,Two,Compile error,Runtime error,A,"Without break statements, execution falls through to subsequent cases.

With i=1, it matches case 1 and prints ""One"", then continues executing case 2 and prints ""Two"".

This demonstrates the fall-through behavior of switch statements.",2025-06-19 19:10:39
34,Working with Inheritance,Static Method Hiding,"What is the output of the following code?

```java
class A {
    static void m() { System.out.println(""A""); }
}
class B extends A {
    static void m() { System.out.println(""B""); }
}
A a = new B();
a.m();

```",A,B,AB,Compile error,Runtime error,A,"Static methods are not overridden; they are hidden.

Method resolution for static methods happens at compile time based on the reference type, not the object type.

Since the reference a is of type A, the compiler resolves the call to A.m(), printing ""A"".

This is different from instance method overriding.",2025-06-19 19:10:39
35,Working with Methods and Encapsulation,Pass by Value (object reference),"What is the output of the following code?

```java
StringBuilder sb = new StringBuilder(""Hi"");
modify(sb);
System.out.println(sb);

public static void modify(StringBuilder b) {
    b.append(""!"");
}

```",Hi!,Hi,!,Compile error,Runtime error,A,"Java passes object references by value.

The method receives a copy of the reference, but both references point to the same StringBuilder object.

When the method calls b.append(""!""), it modifies the original StringBuilder object that sb also references.

Therefore, the output is ""Hi!"".",2025-06-19 19:10:39
36,Working with Methods and Encapsulation,Pass by Value (primitive),"What is the output of the following code?

```java
int i = 5;
{
    int x = i;
    x = 10;
}
System.out.println(i);

```",5,10,Compile error,Runtime error,5 then 10,A,"Java uses pass-by-value for primitives.

The assignment x = i creates a copy of i's value.

Changing x does not affect the original variable i.

The variable i remains 5.

The block scope doesn't change this behavior - x is simply a local variable that gets a copy of i's value.",2025-06-19 19:10:39
37,Working with Inheritance,Polymorphism (Method Overriding),"What does the following code print?

```java
class A {
    void m() { System.out.println(""A""); }
}
class B extends A {
    void m() { System.out.println(""B""); }
}
A a = new B();
a.m();

```",A,B,AB,Compile error,Runtime error,B,"This demonstrates polymorphism and dynamic method dispatch.

Even though the reference variable a is of type A, the actual object is of type B.

At runtime, Java determines which method to call based on the actual object type, not the reference type.

Therefore, B's overridden method m() is called, printing ""B"".",2025-06-19 19:10:39
38,Working with Inheritance,Constructors and super,"What happens when compiling the following code?

```java
class A {
    A(int x) {}
}
class B extends A {
    B() {}
}

```",It compiles successfully.,Compile error: no default constructor in A.,Runtime error.,It compiles but throws exception at runtime.,Unknown behavior.,B,"Class A has only a parameterized constructor A(int x) and no default (no-argument) constructor.

When B's constructor B() is called, it implicitly tries to call super() (the no-argument constructor of A), but A doesn't have one.

This causes a compilation error.

B's constructor must explicitly call super(someIntValue).",2025-06-19 19:10:39
39,Creating and Using Arrays,Multi-dimensional arrays,"What happens when executing the following code?

```java
int[][] arr = new int[2][];
arr[0] = new int[1];
System.out.println(arr[1][0]);

```",Prints 0,Prints null,Runtime NullPointerException,Compile error,Runtime ArrayIndexOutOfBoundsException,C,"The array arr is created with 2 rows but the individual row arrays are not automatically initialized (they are null).

Only arr[0] is explicitly initialized with new int[1].

When trying to access arr[1][0], arr[1] is null, so accessing arr[1][0] throws a `NullPointerException`.",2025-06-19 19:10:39
40,Handling Exceptions,Finally Overrides Return,"What is the output of the following code?

```java
public static int test() {
    try {
        return 1;
    } finally {
        return 2;
    }
}
System.out.println(test());

```",1,2,No output (program hangs),Compile error,Runtime exception,B,"The finally block always executes, even when there's a return statement in the try block.

When the finally block contains a return statement, it overrides any return value from the try or catch blocks.

Therefore, the method returns 2, not 1.

This is generally considered bad practice.",2025-06-19 19:10:39
41,Handling Exceptions,Catch Order,"What is the problem with the following code?

```java
try {
    // some code
} catch (Exception e) {
    // handle Exception
} catch (ArithmeticException e) {
    // handle ArithmeticException  
}

```",No problem; it compiles.,Unreachable catch block for ArithmeticException.,Catch blocks must be in alphabetical order.,Multiple catch blocks require finally block.,Cannot catch specific exceptions after a general one.,B,"The catch block for `ArithmeticException` is unreachable because `ArithmeticException` is a subclass of Exception.

Since Exception is caught first, `ArithmeticException` would never reach its catch block.

More specific exception types must be caught before more general ones.",2025-06-19 19:10:39
42,Handling Exceptions,Checked vs Unchecked,"Which of the following code snippets causes a compilation error?

```java
A: void m() { throw new RuntimeException(); }
B: void m() { throw new Error(); } 
C: void m() throws Exception { throw new IOException(); }
D: void m() { throw new IOException(); }
E: void m() throws IOException { throw new IOException(); }

```",A only,D only,C and E,D and E,B and D,B,"Checked exceptions (like `IOException`) must be declared or caught.

Unchecked exceptions (`RuntimeException`, Error) don’t need to be declared.

✔️ Valid Snippets:

    A: throws `RuntimeException` → unchecked

    B: throws Error → unchecked

    C: declares throws Exception, throws `IOException` → valid

    E: declares throws `IOException`, throws it → valid

❌ Invalid Snippet:

    D: throws `IOException` (checked) without declaring or catching it → compilation error",2025-06-19 19:10:39
43,Working with Methods and Encapsulation,Method Overloading,"What is the output of the following code?

```java
class A {
    void m(int i) { System.out.println(""int""); }
    void m(long l) { System.out.println(""long""); }
}
A a = new A();
a.m(5);

```",int,long,Compile error,Runtime error,No output,A,"The literal 5 is an int by default.

Java chooses the method with the most specific parameter type that matches.

Since there's an exact match with m(int), it's chosen over m(long).

The method prints ""int"".

If the int version were not available, Java would automatically promote 5 to long and call m(long).",2025-06-19 19:10:39
44,Working with Selected classes from the Java API,LocalDate plusDays,"What does the following code print?

```java
LocalDate date = LocalDate.of(2020, 1, 31);
date = date.plusDays(1);
System.out.println(date);

```",2020-01-32,2020-02-01,Compile error,Runtime error,None of the above,B,"LocalDate handles month boundaries automatically.

Adding one day to January 31, 2020 correctly transitions to February 1, 2020.

The LocalDate API is smart enough to handle month rollovers, leap years, and other calendar complexities.

The output format follows ISO-8601 standard: 2020-02-01.",2025-06-19 19:10:39
45,Creating and Using Arrays,Array Reference Aliasing,"What is the output of the following code?

```java
int[] a = {1, 2};
int[] b = a;
b[0] = 3;
System.out.println(a[0]);

```",1,2,3,Compile error,Runtime error,C,"Arrays are objects in Java.

The assignment int[] b = a makes both variables a and b refer to the same array object in memory.

When b[0] is changed to 3, it modifies the same array that a references.

Therefore, a[0] now returns 3.

This demonstrates that arrays are reference types, not value types.",2025-06-19 19:10:39
46,Working with Selected classes from the Java API,StringBuilder reverse,"What is the output of this code?

```java
StringBuilder sb = new StringBuilder(""abc"");
sb.reverse();
System.out.println(sb);

```",abc,cba,Compilation error,Runtime error,acb,B,"The StringBuilder.reverse() method reverses the sequence of characters in the StringBuilder.

The string ""abc"" becomes ""cba"".

Unlike String methods, StringBuilder methods modify the existing object rather than creating a new one.",2025-06-19 19:10:39
47,Working with Selected classes from the Java API,StringBuilder append,"What does the following code print?

```java
StringBuilder sb = new StringBuilder(""Hello"");
sb.append(""World"");
System.out.println(sb);

```",Hello,World,HelloWorld,Hello World,Runtime error,C,"StringBuilder is mutable, unlike String.

The append() method adds the specified string to the end of the existing content and returns the same StringBuilder object.

After appending ""World"" to ""Hello"", the StringBuilder contains ""HelloWorld"", which is what gets printed.",2025-06-19 19:10:39
48,Working with Selected classes from the Java API,DateTimeFormatter,"What does this code print?

```java
DateTimeFormatter fmt = DateTimeFormatter.ofPattern(""MM/dd/yyyy"");
System.out.println(LocalDate.of(2020,1,5).format(fmt));

```",01/05/2020,1/5/2020,05/01/2020,Compile error,Runtime error,A,"The pattern MM/dd/yyyy formats the month and day with exactly two digits (leading zeros when necessary) and the year with four digits.

January 5, 2020 is formatted as 01/05/2020.

The MM forces two-digit month representation, and dd forces two-digit day representation.",2025-06-19 19:10:39
49,Working with Selected classes from the Java API,Lambda Syntax,"What is wrong with this code?

```java
Predicate<String> p = s -> return s.isEmpty();

```",It compiles and always returns true,It compiles and always returns false,It causes a runtime exception,Compilation error,Nothing is wrong,D,"Lambda expression syntax error: you cannot use the 'return' keyword in a lambda expression without braces.

For single expressions, the return is implicit.

The correct syntax would be either s -> s.isEmpty() or s -> { return s.isEmpty(); }.

The current syntax is invalid and causes a compilation error.",2025-06-19 19:10:39
50,Using Operators and Decision Constructs,Ternary Operator Type,"What is the output of the following code?

```java
int x = 5;
long y = 10;
System.out.println((true) ? x : y);

```",5,5L,10,Compile error,Runtime error,A,"In the ternary operator, when the operands are of different types, the result type is determined by type promotion rules.

Here, int x is promoted to long to match long y.

Since the condition is true, x (5) is returned, but the expression type is long.

However, when printed, it displays as 5 (not 5L) because println() handles the conversion.",2025-06-19 19:10:39
51,Using Operators and Decision Constructs,Bitwise vs Logical Operators,"What is the output?

```java
int a = 5, b = 10;
if (a < 10 & b++ > 10) {
    // empty body
}
System.out.println(b);

```",10,11,Compile error,Runtime error,0,B,"The single & operator is the bitwise AND, which evaluates both operands regardless of the first operand's value (no short-circuiting).

Even though a < 10 is true and b++ > 10 is false, both expressions are evaluated.

The b++ increments b from 10 to 11.

If && were used instead, b++ might not be evaluated due to short-circuiting.",2025-06-19 19:10:39
52,Using Operators and Decision Constructs,Switch with Strings,"What is the output?

```java
String s = ""Java"";
switch (s) {
    case ""java"":
        System.out.println(""Lower"");
        break;
    default:
        System.out.println(""Default"");
}

```",Lower,Default,java,Compile error,Runtime error,B,"String comparisons in switch statements are case-sensitive.

The string ""Java"" (with uppercase J) does not match the case ""java"" (with lowercase j).

Since there's no matching case, the default case executes, printing ""Default"".

String switch statements use the equals() method for comparison.",2025-06-19 19:10:39
53,Working with Selected classes from the Java API,Lambda Predicate,"What does the following code print?

```java
Predicate<String> p = s -> s.startsWith(""A"");
System.out.println(p.test(""Apple""));

```",true,false,Compile error,Runtime error,Nothing,A,"The lambda expression s -> s.startsWith(""A"") creates a Predicate that tests whether a string starts with ""A"".

When testing the string ""Apple"", it returns true because ""Apple"" does indeed start with ""A"".

The Predicate functional interface's test() method returns a boolean.",2025-06-19 19:10:39
54,Working with Selected classes from the Java API,ArrayList remove,"What does the following code print?

```java
List<String> list = new ArrayList<>();
list.add(""one"");
list.add(""two"");
list.remove(1);
System.out.println(list.get(0));

```",one,two,Compile error,Runtime error,None of the above,A,"The remove(1) method removes the element at index 1, which is ""two"".

After removal, the list contains only [""one""] at index 0.

Therefore, list.get(0) returns ""one"".

ArrayList indices are zero-based, so index 1 refers to the second element.",2025-06-19 19:10:39
55,Using Loop Constructs,Infinite loop with break,"What is the output?

```java
for (;;) {
    System.out.println(""Hi"");
    break;
}

```",Hi,Compile error,Runtime error,Infinite loop,HiHi,A,"The for(;;) syntax creates an infinite loop (empty initialization, condition, and increment).

However, the break statement immediately exits the loop after the first iteration.

Therefore, ""Hi"" is printed exactly once.

Without the break, this would be an infinite loop.",2025-06-19 19:10:39
56,Working with Selected classes from the Java API,ArrayList basic,"What is the output of the following code?

```java
List<String> list = new ArrayList<>();
list.add(""a"");
list.add(""b"");
System.out.println(list.size());

```",1,2,Compile error,Runtime error,0,B,"Two elements (""a"" and ""b"") were added to the ArrayList.

The size() method returns the number of elements currently in the list, which is 2.

ArrayList dynamically grows as elements are added.",2025-06-19 19:10:39
57,Working with Inheritance,Constructor Chaining,"What is the output of the following code?

```java
class A {
    public A() { System.out.print(""A""); }
}
class B extends A {
    public B() { System.out.print(""B""); }
}
new B();

```",A,B,AB,BA,Compile error,C,"When creating an object of class B, constructor chaining occurs.

Java automatically inserts a call to super() as the first statement in B's constructor.

This calls A's constructor first, which prints ""A"", then B's constructor prints ""B"", resulting in ""AB"".",2025-06-19 19:10:39
58,Creating and Using Arrays,Varargs,"What is printed?

```java
public static void m(int... nums) {
    System.out.println(nums.length);
}
// Called with:
m(1, 2, 3);

```",1,3,0,Compile error,Runtime error,B,"Varargs (variable arguments) allows a method to accept zero or more arguments of the specified type.

The arguments are collected into an array.

When m(1, 2, 3) is called, nums becomes an array containing [1, 2, 3], so nums.length is 3.",2025-06-19 19:10:39
59,Using Operators and Decision Constructs,Assignment in if condition,"What does the following code print?

```java
boolean b = false;
if (b = true) {
    System.out.println(""Yes"");
} else {
    System.out.println(""No"");
}

```",Yes,No,Compile error,Runtime error,Nothing,A,"Inside the if condition, b = true is an assignment (not comparison).

The assignment sets b to true and the assignment expression evaluates to true.

Therefore, the if condition is true, and ""Yes"" is printed.

This is a common source of bugs - use == for comparison, = for assignment.",2025-06-19 19:10:39
60,Working with Inheritance,Final Class,"What happens when compiling this code?

```java
final class A {}
class B extends A {}

```",It compiles successfully.,Compile error: cannot inherit from final A.,Runtime error,No output,An exception is thrown,B,"A class declared as final cannot be subclassed.

The final keyword prevents inheritance.

Attempting to declare class B extends final class A results in a compilation error.

This is similar to how final classes like String cannot be extended.",2025-06-19 19:10:39
61,Handling Exceptions,Finally Always Executes,"What is the output?

```java
try {
    System.out.println(1);
} finally {
    System.out.println(2);
}

```",1,2,1 then 2,Compile error,Runtime exception,C,"The try block executes and prints 1.

The finally block always executes after the try block, regardless of whether an exception occurs, printing 2.

Since there's no exception and no return/break statements, both statements execute in order: 1 then 2.",2025-06-19 19:10:39
62,Working With Java Data Types,char Arithmetic,"What does the following code print?

```java
char c = 'A' + 1;
System.out.println(c);

```",A,B,65,Compile error,Runtime error,B,"The character 'A' has ASCII value 65.

Adding 1 yields 66, which corresponds to the character 'B'.

When performing arithmetic on char values, they are promoted to int, but the result can be assigned back to char if it's a compile-time constant.",2025-06-19 19:10:39
63,Working With Java Data Types,Narrowing Conversion,"What happens when compiling this code?

```java
short s = 5;
s = s + 2;

```","It compiles and runs, printing 7",Compile error: cannot convert int to short,It compiles with a warning,Runtime error,Nothing happens,B,"When performing arithmetic operations, operands are promoted to at least int.

The expression s + 2 results in an int value.

Assigning an int to a short requires explicit casting because it's a narrowing conversion.

The correct code would be s = (short)(s + 2) or s += 2 (compound assignment operators include implicit casting).",2025-06-19 19:10:39
64,Working with Methods and Encapsulation,Private Constructor,"What happens if you try to compile and run this?

```java
class A {
    private A() {}
}
// In another class or method:
new A();

```",It compiles successfully.,Compile error: A() has private access.,Runtime error,It prints an empty line,None of the above,B,"The constructor A() is declared private, making it inaccessible from outside the class A.

Attempting to call new A() from outside the class results in a compilation error due to access restriction.

Private constructors are often used in singleton patterns or utility classes.",2025-06-19 19:10:39
65,Handling Exceptions,Catching RuntimeException,"What is the output?

```java
try {
    System.out.println(1/0);
} catch (Exception e) {
    System.out.println(""Exception"");
}

```",1,Exception,No output,Runtime error,Compile error,B,"Division by zero (1/0) throws an `ArithmeticException`, which is a subclass of `RuntimeException`, which is a subclass of Exception.

The catch block for Exception catches the `ArithmeticException` and prints ""Exception"".

The division operation never completes, so 1/0 is never printed.",2025-06-19 19:10:39
66,Working with Inheritance,Private Method Hiding,"What happens if you try to compile and run this?

```java
class A {
    private void m() {}
}
class B extends A {
    public void m() { System.out.println(""B""); }
}
A a = new B();
a.m();

```",It prints B,It prints nothing,Compile error,Runtime error,It prints A,C,"Class A has a private method m(), which is not visible outside of A.

Class B's method m() is not an override but a completely new method since private methods are not inherited.

The reference a of type A cannot access any method m() because A's m() is private and B's m() is not visible through an A reference.

This causes a compilation error.",2025-06-19 19:10:39
67,Working With Java Data Types,Numeric Literals,"What is wrong with the following declaration?

```java
long l = 10000000000;

```",No error; l is 10000000000,Compile error: integer number too large,It prints a random number,Runtime error,It becomes a double,B,"The literal 10000000000 (10 billion) exceeds the range of int (-2,147,483,648 to 2,147,483,647).

Since numeric literals without suffix are treated as int by default, this causes a compilation error.

To create a long literal, append L or l: long l = 10000000000L.",2025-06-19 19:10:39
68,Working With Java Data Types,Float precision,"What is the output of this code?

```java
float f = 0.1f + 0.1f + 0.1f;
System.out.println(f == 0.3f);

```",true,false,Compile error,Runtime error,0.3,B,"Floating-point arithmetic is inherently imprecise due to binary representation limitations.

The sum of three 0.1f values is not exactly equal to 0.3f due to rounding errors in binary floating-point representation.

This demonstrates why direct equality comparisons with floating-point numbers should be avoided in favor of range-based comparisons.",2025-06-19 19:10:39
69,Working with Selected classes from the Java API,String equals,"What is the output?

```java
String s1 = new String(""hello"");
String s2 = new String(""hello"");
System.out.println(s1 == s2);
System.out.println(s1.equals(s2));

```",true true,true false,false true,false false,Compile error,C,"The == operator compares object references, not content.

Since s1 and s2 are created with new String(), they are different objects in memory, so s1 == s2 is false.

The equals() method compares the actual string content, so s1.equals(s2) is true because both strings contain ""hello"".",2025-06-19 19:10:39
70,Working with Selected classes from the Java API,HashMap put,"What does this code print?

```java
Map<String, Integer> map = new HashMap<>();
map.put(""key"", 1);
map.put(""key"", 2);
System.out.println(map.get(""key""));

```",1,2,null,Compile error,Runtime error,B,"HashMap stores key-value pairs where each key is unique.

When put() is called with an existing key, it replaces the previous value.

The first put(""key"", 1) stores the mapping, then put(""key"", 2) replaces the value 1 with 2.

Therefore, map.get(""key"") returns 2.",2025-06-19 19:10:39
71,Working with Selected classes from the Java API,String immutability,"What does the following code print?

```java
String s = ""Hello"";
s.concat(""World"");
System.out.println(s);

```",Hello,HelloWorld,World,Compilation error,Runtime error,A,"String objects are immutable in Java.

The concat() method returns a new String object containing ""HelloWorld"", but this new string is not assigned to any variable.

The original string s remains unchanged and still contains ""Hello"".

To get ""HelloWorld"", you would need to assign the result: s = s.concat(""World"").",2025-06-19 19:10:39
72,Working with Inheritance,Abstract Class,"What is wrong with the following code?

```java
abstract class A {}
class B {
    public static void main(String[] args) {
        A a = new A();
    }
}

```",It prints A,It prints nothing,Compile error: cannot instantiate abstract A.,Runtime error,It compiles successfully,C,"Abstract classes cannot be instantiated directly using the new operator.

They are meant to be extended by concrete classes.

Attempting to create new A() where A is abstract causes a compilation error.

You can only create instances of concrete (non-abstract) subclasses of A.",2025-06-19 19:10:39
73,Working with Selected classes from the Java API,ArrayList contains,"What is the output?

```java
List<Integer> list = new ArrayList<>();
list.add(1);
list.add(2);
System.out.println(list.contains(1));

```",true,false,1,Compile error,Runtime error,A,"ArrayList.contains() returns true if the list contains the specified element, false otherwise.

The list contains the Integer 1 (added first), so list.contains(1) returns true.

The method uses the equals() method to compare elements, and autoboxing handles the conversion between int and Integer.",2025-06-19 19:10:39
74,Working with Methods and Encapsulation,Static vs Instance Methods,"What is the output of this code? 

```java
public class Counter { 

  static int count = 0; 
  public Counter() { 

    count++; 

  } 

  public static void main(String args) { 

    Counter c1 = new Counter(); 
    Counter c2 = new Counter(); 
    System.out.println(Counter.count); 

  } 
}

```",0,1,2,Compilation error,Runtime error,C,"The static variable count is shared by all instances.

Each constructor call increments it: c1 increments to 1, c2 increments to 2.",2025-06-20 19:32:28
75,Working with Methods and Encapsulation,Access Modifiers,Which access modifier allows a member to be accessed only within its own class?,public,protected,private,default,static,C,The private access modifier restricts access to members to only within the class where they are declared.,2025-06-20 19:32:28
76,Working with Inheritance,Abstract Classes,Which statement about abstract classes and interfaces is true?,A class can implement multiple abstract classes.,An interface can have concrete methods before Java 8.,An abstract class can have constructors.,All methods in an interface must be abstract.,An abstract class cannot have any concrete methods.,C,"An abstract class can have constructors, though they cannot be directly instantiated.

They are used when a concrete subclass is instantiated.",2025-06-20 19:32:28
77,Handling Exceptions,Checked vs Unchecked Exceptions,Which of the following is an unchecked exception?,IOException,SQLException,FileNotFoundException,NullPointerException,InterruptedException,D,"`NullPointerException` is a `RuntimeException` and thus an unchecked exception.

The others are checked exceptions.",2025-06-20 19:32:28
78,Working With Java Data Types,Working with Java Data Types,"How many objects are created by the time the main method finishes in this code: 

```java
public class Creator { 
  
  public Creator() { 
    try { 
      throw new Exception(); 
    } 
    catch (Exception e) {} 
  } 

  public static void main(String args) { 
    Creator c1 = new Creator(); 
    Creator c2 = new Creator(); 
    Creator c3 = c1; 
  } 

}

```",2,3,4,5,6,C,"Two Creator objects are created (c1 and c2).

Two Exception objects are created (one in each constructor call). c3 = c1 only creates a new reference, not a new object.

Total: 4 objects.",2025-06-20 19:32:28
79,Using Operators and Decision Constructs,Operator Precedence,"What is the final value of result? 

```java
int x = 5; 
int y = 10; 
int z = 15; 

boolean result = x < y && y < z || z > x;

```",true,false,Compilation error,Runtime error,Depends on JVM,A,The expression evaluates as: (x < y && y < z) || z > x = (true && true) || true = true || true = true,2025-06-20 19:32:28
80,Working With Java Data Types,Variable Casting and Conversions,"What is the output of this code? 

```java
double d = 10.5; 
int i = (int) d; 
System.out.println(i);

```",10.5,10,11,Compilation error,Runtime error,B,"When a double is cast to an int, the decimal part is truncated (not rounded).

So 10.5 becomes 10.",2025-06-20 19:32:28
81,Handling Exceptions,Exception Handling,"What is correct about this code? 

```java
class A { 
  public void doA() throws Exception { 
    throw new Exception(); 
  } 
} 

class B extends A { 
  public void doB() { 
    doA(); 
  } 
}

```",The code compiles and runs without error.,The code compiles if throws Exception is added to doB().,The code compiles if throws Exception is added to main().,The code compiles if throws Exception is added to doB() AND main().,The code compiles if doA() is enclosed in a try-catch block within doB().,D,"doA() throws a checked exception, so doB() must either handle it or declare it.

If doB() declares it, then main() must also handle or declare it.",2025-06-20 19:32:28
82,Working with Methods and Encapsulation,Method Declaration and Parameters,"What will this program print? 

```java
public class ChangeTest { 

  private int myValue = 0; 

  public void showOne(int myValue) { 
    myValue = myValue; 

  } 

  public void showTwo(int myValue) { 

    this.myValue = myValue; 

  } 

  public static void main(String args) { 

    ChangeTest ct = new ChangeTest(); 

    ct.showTwo(200); 

    System.out.println(ct.myValue); 

    ct.showOne(100); 

    System.out.println(ct.myValue); 

  } 

}

```",0 followed by 100.,100 followed by 100.,0 followed by 200.,100 followed by 200.,200 followed by 200.,E,"showTwo() correctly assigns the parameter to the instance variable using this.myValue. showOne() assigns the parameter to itself due to variable shadowing, not affecting the instance variable.

Result: 200 followed by 200.",2025-06-20 19:32:28
83,Working With Java Data Types,Autoboxing and Unboxing,"What is the output of this code?

```java
Integer a = 10; 
Integer b = 10; 
Integer c = 200; 
Integer d = 200; 

System.out.println(a == b); 

System.out.println(c == d);

```",true true,true false,false true,false false,Compilation error,B,"Integer values between -128 and 127 are cached, so a and b refer to the same object (true).

Values outside this range create new objects, so c and d are different objects (false).",2025-06-20 19:32:28
84,Working with Methods and Encapsulation,Constructors,Given the class: class MyClass { int x; } Which statement is true about its constructor?,It has an implicit public no-argument constructor.,It has an implicit default constructor that initializes x to 0.,It requires an explicit constructor to be defined.,It will not compile without a constructor.,It has an implicit private no-argument constructor.,B,"If no constructor is explicitly defined, Java provides a default no-argument constructor that initializes instance variables to their default values (int x to 0).",2025-06-20 19:32:28
85,Using Operators and Decision Constructs,Operators,"What is the value of result? 

```java
int x = 5; 
int y = ++x; 
int z = y--; 
int result = x + y + z;

```",15,16,17,18,Compilation error,C,"x starts at 5. y = ++x makes x = 6, y = 6. z = y-- makes z = 6, y = 5. result = 6 + 5 + 6 = 17.",2025-06-20 19:32:28
86,Using Loop Constructs,Looping Constructs,"What will this code print? 

```java
void crazyLoop() { 

  int c = 0; 

  JACK: while (c < 8) { 

    JILL: System.out.println(c); 
    if (c > 3) break JACK; 
    else c++; 

  } 

}

```",It will not compile.,It will throw an exception at runtime.,It will print numbers from 0 to 8,It will print numbers from 0 to 3,It will print numbers from 0 to 4,E,"The loop prints c (0,1,2,3,4) and breaks when c > 3, which happens after printing 4.",2025-06-20 19:32:28
87,Working with Methods and Encapsulation,Static vs Instance Methods,"What is the output of this code? 

```java
public class StaticTest { 
  
  static int x = 10; 
  static { x += 5; } 
  
  public static void main(String args) { 
  
    System.out.println(x); 
  
  } 

  static { x += 10; } 

}

```",10,15,25,Compilation error,Runtime error,C,"Static initializers execute in order when the class is loaded. x starts at 10, first static block adds 5 (x=15), second static block adds 10 (x=25).",2025-06-20 19:32:28
88,Java Basics,Variable Declaration and Initialization,What is the output of this code? public class ScopeTest { public static void main(String args) { int x = 10; { int y = 20; System.out.println(x + y); } System.out.println(x); } },30 10,30 20,Compilation error,Runtime error,30,A,"Variables declared within a block are only accessible within that block. x is accessible throughout main, y is only accessible in the inner block.

Output: 30 (x+y), then 10 (x).",2025-06-20 19:32:28
89,Using Operators and Decision Constructs,Bitwise Operators,"What is the output of this code? 

```java
int a = 5; 
int b = 3; 

System.out.println(a | b);

```",1,3,5,7,Compilation error,D,Bitwise OR operation: 5 (0101) | 3 (0011) = 7 (0111).,2025-06-20 19:32:28
90,Handling Exceptions,Exception Handling,Which is the correct order for catch blocks if both Exception and IOException might be thrown?,catch (Exception e) {} catch (IOException e) {},catch (IOException e) {} catch (Exception e) {},The order does not matter.,It will not compile with both catch blocks.,None of the above.,B,"More specific exceptions must be caught before more general ones.

`IOException` is more specific than Exception, so it must come first.",2025-06-20 19:32:28
91,Java Basics,Main Characteristics of Java,Which of the following is NOT a core feature of Java?,Platform Independence,Object Orientation,Pointers,Automatic Memory Management,Multi-threading,C,"Java is designed without explicit pointers for security and simplified memory management.

The other options are all core features of Java.",2025-06-20 19:32:28
92,Creating and Using Arrays,Arrays,"What is the output of this code?

```java
String[] names = new String[3]; 

System.out.println(names[0]);

```",null,empty string,Compilation error,Runtime error,undefined,A,"When an array of objects is created, elements are initialized to null. names[0] is null.",2025-06-20 19:32:28
93,Using Loop Constructs,While Loops,"What will this code print? 

```java
int i = 0; 

while (i < 5) { 

System.out.print(i); 

}

```",01234,000... (infinite loop),Compilation error,Runtime error,None of the above.,B,"i is never incremented, so the condition i < 5 remains true forever, printing 0 infinitely.",2025-06-20 19:32:28
94,Working with Selected classes from the Java API,Generics,Which ArrayList declaration will cause a compile-time error?,ArrayList list = new ArrayList();,ArrayList<String> list = new ArrayList<String>();,ArrayList<Object> list = new ArrayList<String>();,ArrayList<Integer> list = new ArrayList<>();,ArrayList<Number> list = new ArrayList<Integer>();,C,"Due to generic invariance, ArrayList<String> cannot be assigned to ArrayList<Object> even though String is a subtype of Object.",2025-06-20 19:32:28
95,Java Basics,Comments,Which type of comment is used for Javadoc documentation?,// single line comment,/* multi-line comment */,/** Javadoc comment */,# shell-style comment,<!-- HTML comment -->,C,"Javadoc comments start with /** and end with */.

They are used to generate API documentation.",2025-06-20 19:32:28
96,Using Operators and Decision Constructs,Operators,"What is the output of this code? 

```java
int x = 10; 

System.out.println(x++ + ++x);

```",20,21,22,23,Compilation error,C,"x++ uses current value 10 then increments x to 11. ++x increments x to 12 then uses 12.

Result: 10 + 12 = 22.",2025-06-20 19:32:28
97,Creating and Using Arrays,Arrays,"What is the output of this code? 

```java
int[] arr = new int[3]; 

System.out.println(arr[0] + arr[1] + arr[2]);

```",0,1,2,Compilation error,Runtime error,A,Arrays of primitive numeric types are initialized to their default value (0 for int). 0 + 0 + 0 = 0.,2025-06-20 19:32:28
98,Using Operators and Decision Constructs,Operators,"What is the value of x after this code executes? 

```java
int x = 10; 
x += 5; 
x /= 3; 
x %= 2;

```",0,1,2,3,Compilation error,B,"x starts at 10, becomes 15 after +=5, becomes 5 after /=3 (integer division), becomes 1 after %=2.",2025-06-20 19:32:28
99,Working with Inheritance,Interfaces,Which statement is true about interfaces in Java 8?,Interfaces can have private methods.,Interfaces can have abstract methods default methods and static methods.,Interfaces can have constructors.,Interfaces can extend classes.,Interfaces can implement other interfaces.,B,"Java 8 introduced default and static methods to interfaces, in addition to abstract methods.

Private methods were added in Java 9.",2025-06-20 19:32:28
100,Handling Exceptions,Exception Hierarchy,Which exception type is a subclass of RuntimeException?,IOException,SQLException,ClassNotFoundException,IllegalArgumentException,InterruptedException,D,"`IllegalArgumentException` is a direct subclass of `RuntimeException` (unchecked).

The others are checked exceptions.",2025-06-20 19:32:28
101,Working with Selected classes from the Java API,StringBuilder Class,What is the initial capacity of a StringBuilder object created with no arguments?,11,16,17,34,Compilation error,B,"When a StringBuilder is created with no arguments, its initial capacity is 16 characters.",2025-06-20 19:32:28
102,Java Basics,Class Structure,Which of the following is NOT a component of a Java class?,Field,Method,Constructor,Interface,Nested Class,D,"A Java class consists of fields, methods, constructors, and nested classes.

An interface is a separate construct, not a component of a class.",2025-06-20 19:32:28
103,Using Operators and Decision Constructs,Ternary Operator,What will be printed? int x = 1; int y = 2; int z = x++; int a = --y; int b = z--; b += ++z; int answ = x > a? y > b? y : b : x > z? x : z; System.out.println(answ);,0,1,2,3,-1,C,"After all operations: x=2, y=1, z=1, a=1, b=2.

The ternary expression evaluates to b=2.",2025-06-20 19:32:28
104,Using Loop Constructs,For Loops,What is the output of this code? for (int i = 0; i < 5; i++) { if (i == 2) continue; System.out.print(i); },01234,0134,0123,1234,Compilation error,B,"The loop prints 0, 1, skips 2 (due to continue), prints 3, 4.

Output: 0134",2025-06-20 19:32:28
105,Java Basics,Class Structure,What is the minimum requirement for a Java source file to compile and run successfully?,It must contain a public class with a main method.,It must contain a class with a main method.,It must contain a public static void main(String args) method.,It must contain at least one class definition.,It must have a package declaration.,B,"A Java source file only needs to contain a class with a main method to compile and run.

The class does not necessarily have to be public, nor does it need a package declaration if it's in the default package.",2025-06-20 19:32:28
106,Working With Java Data Types,Variable Declaration and Initialization,What is the default value for an uninitialized instance variable of type double?,0,0.0,null,undefined,It depends on the JVM.,B,"Instance variables (fields) in Java are automatically initialized to their default values if not explicitly assigned.

For numeric primitive types like double, the default value is 0.0.",2025-06-20 19:32:28
107,Working with Selected classes from the Java API,String Class,Which statement is true about String and StringBuilder in Java?,String is mutable StringBuilder is immutable.,Both String and StringBuilder are mutable.,String objects are stored on the heap StringBuilder objects are stored in the String pool.,StringBuilder is more efficient for frequent string modifications than String.,String is thread-safe StringBuilder is not.,D,"StringBuilder is mutable and more efficient for frequent modifications.

String is immutable and creates new objects for each modification.",2025-06-20 19:32:28
108,Java Basics,Package Declaration,Which statement about package declarations is true?,A Java source file can have multiple package declarations.,The package declaration must be the first statement in a Java source file.,If a package is not declared the class belongs to the java.lang package.,If a package is not declared the class belongs to the default package.,Package names must start with a capital letter.,D,"A source file can have at most one package declaration.

If no package is declared, the class belongs to the default package.",2025-06-20 19:32:28
109,Working With Java Data Types,Primitive Data Types,Which primitive data type has a size of 4 bytes?,byte,short,int,long,char,C,"byte=1 byte, short=2 bytes, int=4 bytes, long=8 bytes, char=2 bytes.",2025-06-20 19:32:28
110,Working with Methods and Encapsulation,Method Declaration and Parameters,"What will be the output of this code? 

```java
public class MethodTest { 

  public static void changeValue(int val) { val = 100; } 
  
  public static void main(String args) { 

    int data = 50; 
    changeValue(data); 
    System.out.println(data); 

  } 

}

```",50,100,Compilation error,Runtime error,None of the above.,A,"Java uses pass-by-value.

A copy of data (50) is passed to val.

Modifying val doesn't affect the original data variable.",2025-06-20 19:32:28
111,Working with Inheritance,Method Overriding,"What can be substituted for XXX and YYY? 

```java
class A { 
  public XXX m1(int a) { 
    return a * 10 / 4 - 30; 
  } 
} 

class A2 extends A { 
  
  public YYY m1(int a) { 
    return a * 10 / 4.0; 
  } 
}

```",int int,int double,double double,double int,Nothing they are not compatible.,C,"For overriding, return types must be same or covariant. double can accommodate int results, and double can be returned as double.",2025-06-20 19:32:28
112,Using Loop Constructs,Looping Constructs,Which loop construct guarantees execution of its body at least once?,for loop,while loop,do-while loop,enhanced for loop,None of the above.,C,"The do-while loop evaluates its condition after executing the body, guaranteeing at least one execution.",2025-06-20 19:32:28
113,Java Basics,Import Statements,Which statement about import statements is true?,They must appear before the package declaration.,They are optional if using fully qualified names.,They can import multiple specific classes with a single statement using a wildcard.,They can import specific methods from a class.,All of the above.,B,"Import statements are optional if you use fully qualified names.

They must appear after package declaration and cannot import specific methods (only classes or static members).",2025-06-20 19:32:28
114,Using Loop Constructs,Break and Continue Statements,What will be the output of this code? int i = 0; while (i < 10) { i++; if (i % 2 == 0) continue; System.out.print(i); },13579,02468,123456789,246810,Compilation error,A,"The loop increments i first, then checks if even (continue skips print for even numbers).

Only odd values are printed: 1,3,5,7,9.",2025-06-20 19:32:28
115,Handling Exceptions,Exception Handling,Which method declaration is valid?,public void method() throws Exception { throw new IOException(); },public void method() { throw new IOException(); },public void method() throws IOException { throw new Exception(); },public void method() throws RuntimeException { throw new IOException(); },public void method() { throw new RuntimeException(); },E,"Unchecked exceptions (`RuntimeException`) don't require declaration in throws clause.

Option E is valid.",2025-06-20 19:32:28
116,Handling Exceptions,Exception Handling,Which is an advantage of the Java exception mechanism?,Provides a set of standard exceptions that covers all possible errors.,Allows the creation of new exceptions customized to the particular program.,Improves program structure by separating error handling code from normal program flow.,Improves program structure because exceptions must be handled in the method in which they occur.,All of the above.,C,"The main advantage is separating error-handling logic from normal business logic, leading to cleaner and more readable code.",2025-06-20 19:32:28
117,Working with Methods and Encapsulation,Access Modifiers,"What is the output of this code? 

```java
public class AccessTest { 

  private int value = 10; 

  public static void main(String args) { 

    AccessTest at = new AccessTest(); 
    System.out.println(at.value); 

  } 

}

```",10,0,Compilation error,Runtime error,None of the above.,A,"Private members are accessible within the same class.

Since main() is part of AccessTest, it can access the private value field.",2025-06-20 19:32:28
118,Java Basics,Main Characteristics of Java,Which statement is true about Java bytecode?,It can run on any platform.,It can run on any platform only if it was compiled for that platform.,It can run on any platform that has the Java Runtime Environment.,It can run on any platform that has a Java compiler.,It can run on any platform only if that platform has both the JRE and a Java compiler.,C,"Java bytecode is platform-independent and can run on any platform that has a Java Virtual Machine (JVM), which is part of the Java Runtime Environment (JRE).",2025-06-20 19:32:28
119,Working With Java Data Types,Primitive Casting,"What is the output of the following code? 

```java
double d = 10.5; 
int i = (int) d; 

System.out.println(i);

```",10.5,10,11,Compilation error,Runtime error,B,"When a double is cast to an int, the decimal part is truncated (removed), not rounded.

So, 10.5 becomes 10.

The output is 10.",2025-06-20 19:32:59
120,Working With Java Data Types,Autoboxing/Unboxing,"What is the output of the following code?

```java
Integer a = 10; 
Integer b = 10; 
Integer c = 200; 
Integer d = 200; 

System.out.println(a == b); 
System.out.println(c == d);

```",true true,true false,false true,false false,Compilation error,B,"For Integer values between -128 and 127 (inclusive), Java caches the objects.

So, a and b will refer to the same cached Integer object, making a == b true.

For values outside this range, new Integer objects are typically created, so c and d will refer to different objects, making c == d false.

This is a common trick question related to Integer caching.",2025-06-20 19:32:59
121,Working With Java Data Types,Object References,"What is the output of the following code?

```java
Object obj1 = new Object(); 

Object obj2 = obj1; 

obj1 = null; 

System.out.println(obj2 == null);

```",true,false,null,Compilation error,Runtime error,B,"1.

Object obj1 = new Object(); obj1 refers to a new Object instance. 2.

Object obj2 = obj1; obj2 now also refers to the same Object instance as obj1. 3. obj1 = null; obj1 is reassigned to null, but obj2 still refers to the original Object instance.

Therefore, System.out.println(obj2 == null) will print false because obj2 is not null.",2025-06-20 19:32:59
122,Working with Methods and Encapsulation,Static Keyword,"What is the output of the following code? 

```java
public class Counter { 
  
  static int count = 0; 
  
  public Counter() { count++; } 
  
  public static void main(String[] args) { 

    Counter c1 = new Counter(); 
    Counter c2 = new Counter(); 
    
    System.out.println(Counter.count); 

  } 

}

```",0,1,2,Compilation error,Runtime error,C,"The count variable is static, meaning it belongs to the class, not to individual objects.

There is only one copy of count shared by all instances of Counter.

Each time a Counter object is created (i.e., the constructor is called), count is incremented.

So, c1 increments count to 1, and c2 increments count to 2.

Printing Counter.count will output 2.",2025-06-20 19:32:59
123,Handling Exceptions,Method Throwing Exception,"Consider the code: 

```java
class A { 
  
  public void doA() throws Exception { 
    throw new Exception(); 
  } 
} 

class B extends A { 
  public void doB() { 
    doA(); 
  } 
} 

public class Test { 
  public static void main(String[] args) { 
    B b = new B(); 
    b.doB(); 
  } 
} 

```

Which statement is correct?",The code compiles and runs without error.,The code compiles if throws Exception is added to doB().,The code compiles if throws Exception is added to main().,The code compiles if throws Exception is added to doB() AND main().,The code compiles if doA() is enclosed in a try-catch block within doB().,D,"doA() declares that it throws Exception (a checked exception).

Therefore, any method calling doA() must either handle the exception (with try-catch) or declare that it also throws Exception.

Currently, doB() calls doA() but does neither, causing a compile-time error.

If doB() is fixed to throws Exception, then main() which calls doB() must also either handle or declare the exception.

Thus, both doB() and main() need throws Exception in their signatures for the code to compile.",2025-06-20 19:32:59
124,Using Operators and Decision Constructs,Compound Assignment,What is the value of x after the following code executes? int x = 10; x += 5; x /= 3; x %= 2;,0,1,2,3,Compilation error,B,"Let's trace the value of x: 1. int x = 10; -> x is 10. 2. x += 5; (equivalent to x = x + 5;) -> x becomes 10 + 5 = 15. 3. x /= 3; (equivalent to x = x / 3;) -> x becomes 15 / 3 = 5 (integer division). 4. x %= 2; (equivalent to x = x % 2;) -> x becomes 5 % 2 = 1.

The final value of x is 1.",2025-06-20 19:32:59
125,Working with Methods and Encapsulation,Pass-by-Value,"What will the following program print? 

```java
public class ChangeTest { 

  private int myValue = 0; 

  public void showOne(int myValue) { 

    myValue = myValue; 

  } 

  public void showTwo(int myValue) { 

    this.myValue = myValue; 

  } 

  public static void main(String[] args) { 

    ChangeTest ct = new ChangeTest(); 

    ct.showTwo(200); 

    System.out.println(ct.myValue); 

    ct.showOne(100); 

    System.out.println(ct.myValue); 

  } 

}

```",0 followed by 100.,100 followed by 100.,0 followed by 200.,100 followed by 200.,200 followed by 200.,E,"In showTwo(int myValue), this.myValue = myValue; correctly assigns the parameter 200 to the instance variable myValue.

So, the first print outputs 200.

In showOne(int myValue), myValue = myValue; assigns the method parameter to itself due to variable shadowing (the parameter myValue hides the instance variable myValue).

This line has no effect on the instance variable.

Thus, ct.myValue remains 200.

The second print also outputs 200.",2025-06-20 19:32:59
126,Working With Java Data Types,Object Lifecycle,"How many objects are created by the time the main method finishes in the following code? 

```java
public class Creator { 

  public Creator() { 

    try { 

      throw new Exception(); 

    } 

    catch (Exception e) {} 

  } 

  public static void main(String[] args) { 

    Creator c1 = new Creator(); 
    Creator c2 = new Creator(); 
    Creator c3 = c1; 

  } 

}

```",2,3,4,5,6,C,"Let's trace object creation: 1.

Creator c1 = new Creator(); creates one Creator object.

Inside its constructor, new Exception() creates one Exception object. (Total: 2 objects). 2.

Creator c2 = new Creator(); creates another Creator object.

Inside its constructor, another Exception object is created. (Total: 2 more objects). 3.

Creator c3 = c1; only creates a new reference c3 and points it to the existing c1 object.

No new object is created.

Total objects created: 2 + 2 = 4.",2025-06-20 19:32:59
127,Using Loop Constructs,For Loop,"What is the output of the following code? 

```java
for (int i = 0; i < 5; i++) { 

  if (i == 2) continue; 
  
  System.out.print(i); 

}

```",01234,0134,0123,1234,Compilation error,B,"The for loop iterates from i = 0 to 4.

When i is 0, it prints 0.

When i is 1, it prints 1.

When i is 2, the if (i == 2) condition is true, and continue is executed. continue skips the rest of the current iteration and proceeds to the next iteration of the loop.

So, 2 is not printed.

When i is 3, it prints 3.

When i is 4, it prints 4.

The output is 0134.",2025-06-20 19:32:59
128,Creating and Using Arrays,Array Declaration and Initialization,"What will be the output of the following program code?

public class Main {

    public static void main(String args[]) {

        int[] arr = new int[10];
        System.out.println(""Accessing Element Eleven: "" + arr[10]);

    }

}",Compilation Fails.,ArrayIndexOutOfBoundsException,Accessing Element Eleven: 0,NoDataFoundException,,B,"Array is declared with 10 elements (indices 0-9).

The code tries to access index 10, which is the 11th element that doesn't exist, throwing `ArrayIndexOutOfBoundsException`.",2025-06-20 19:33:21
129,Java Basics,Simple Execution of Java Program,"Which of the following is valid for compiling a Java source file named ""Main.java""?",javac Main.java,java Main.class,java Main.java,javac Main,java Main,A,"The Java compiler is invoked with the 'javac' command.

When compiling a Java class, you must include the complete filename with the .java extension.",2025-06-20 19:33:21
130,Handling Exceptions,Exception Handling,"Choose the correct option to complete the following program code.

```java
1. public void method() _____ Exception {
2.     _____ new Exception();
3. }

```",throws in line 1 and throw in line 2,throws new in line 1 and throw in line 2,throw new in line 1 and throws in line 2,throws in line 1 and throws new in line 2,throw in line 1 and throw new in line 2,A,"In method declaration, the keyword 'throws' is used to declare exceptions.

To actually throw an exception, the keyword 'throw' is used with 'new' to create the exception instance.",2025-06-20 19:33:21
131,Using Loop Constructs,Enhanced For Loops,"Which option can replace the condition in the enhanced for loop?

```java
public class Main {
    public static void main(String[] args) {
        int[] testData = {1, 2, 3};
        for(_____ : testData) {
            System.out.println(i);
        }
    }
}

```",int i,int i = 0; i < 3; i++,i = 0; i < 3; i++,"int i, j",i < 3,A,Enhanced for loops (for-each) require a variable declaration that matches the array element type. 'int i' correctly declares the loop variable to iterate over the int array elements.,2025-06-20 19:33:21
132,Using Loop Constructs,For Loops,"What will be the output of the following program code?

public class Main {
    public static void main(String[] args) {
        int sum = 0;
        
        for(int x = 0; x < 10; x++)
            sum += x;
        System.out.print(""sum for 0 to "" + x);
        System.out.println("" = "" + sum);
    }
}",sum for 0 to 9 = 45,sum for 0 to 10 = 45,Compilation fails due to an error in line 6.,Compilation fails due to an error in line 7.,Runtime Exception,D,"The scope of loop variable 'x' is limited to the for loop block.

Trying to access 'x' outside the loop (in the print statement) causes a compilation error because 'x' is not in scope.",2025-06-20 19:33:21
133,Working With Java Data Types,Variable Declaration and Initialization,Which of the following is a valid identifier?,_2DPoint,$oca-jp,2DPoint,java@elabs,$*coffee,A,"Java identifiers can start with a letter, underscore (_), or dollar sign ($).

They cannot start with a digit or contain special characters like @ or *. '_2DPoint' and '$ocajp' are valid, but '_2DPoint' is option A.",2025-06-20 19:33:21
134,Working with Methods and Encapsulation,Access Modifiers,"What is the output of the following code?

```java
package epracticelabs;

public class A {

    protected int y = 15;

}

package elab;

import epracticelabs.A;

public class B extends A {

    int y = 10;

    public void print() {

        A a = new A();
        System.out.println(a.y + y);

    }

}

```",20,25,30,Compilation fails due to error at line 14,Compilation fails due to multiple errors,E,"The code has multiple issues: B cannot access the protected field 'y' of class A through an instance (a.y) from a different package, and there's variable shadowing with the field 'y' in class B.",2025-06-20 19:33:21
135,Creating and Using Arrays,Array Declaration and Initialization,"Which exception will the following statement generate?

int array[] = new int[-2];",NullPointerException,NegativeArraySizeException,ArrayIndexOutOfBoundsException,IndexOutOfBoundsException,The statement executes without any exception.,B,"When creating an array with a negative size, Java throws `NegativeArraySizeException` because array sizes must be non-negative.",2025-06-20 19:33:21
136,Working with Selected classes from the Java API,Date Time API,"What is the output of the following code?

```java
import java.time.LocalDate;

public class MyExamCloudOCajps {

    public static void main(String[] args) {

        LocalDate date = LocalDate.parse(""2014-12-30"");
        date = date.plusDays(2);
        date.plusHours(12);
        System.out.println(date.getYear() + "" "" + date.getMonth() + "" "" + date.getDayOfMonth());
    }
}

```",2015 JANUARY 1,2015 JANUARY 2,2014 JANUARY 3,An exception is thrown,Compilation fails,E,"LocalDate class doesn't have a plusHours() method.

Hours are handled by LocalTime or LocalDateTime classes, so the code fails to compile.",2025-06-20 19:33:21
137,Working With Java Data Types,Variable Declaration and Initialization,"What will be the output of this program code?

```java
public class Main {

    public static void main(String[] args) {

        String str = ""1200"";
        int num = Integer.parseInt(str);
        System.out.println(num);

    }

}

```",0,1200,Runtime exception NumberFormatException is generated.,Compilation fails due to an error at line 6.,Compilation fails due to an error at line 9.,B,"The string ""1200"" is a valid integer representation, so Integer.parseInt() successfully converts it to the integer 1200 and prints it.",2025-06-20 19:33:21
138,Java 8 Features,Lambda Expressions,"Which of the following can be considered as enhancements in Java 8?

1. Support for Lambda Expressions
2. Multiple inheritance
3. Default methods in interfaces
4. Date and Time API",Only 1,Only 2,Only 1 and 3,"Only 1, 3, and 4",Only 2 and 4,D,"Java 8 introduced Lambda Expressions (1), default methods in interfaces (3), and a new Date and Time API (4).

Java still doesn't support multiple inheritance of classes (2).",2025-06-20 19:33:21
139,Working With Java Data Types,Variable Declaration and Initialization,"What is the output of the following code?

```java
public class MyExamCloudOCAIPs {

    static int y = 10;
    
    public static void main(String[] args) {

        int y;
        System.out.println(y + MyExamCloudOCAIPs.y);

    }
}

```",10,11,20,NullPointerException,Compilation error,E,"Local variable 'y' is declared but not initialized.

Java requires local variables to be initialized before use, causing a compilation error.",2025-06-20 19:33:21
140,Working With Java Data Types,Wrapper Classes,"Which of the following will convert the string to a primitive float?

```java
String str = ""1.2"";

```",Float.parseFloat(str),Float.valueOf(str),new Float(str),(float) str,All of the above,A,"Float.parseFloat() returns a primitive float.

Float.valueOf() and new Float() return Float wrapper objects, not primitives. (float) str won't compile as you cannot cast a String to float.",2025-06-20 19:33:21
141,Using Operators and Decision Constructs,Operators,"What is the output of the following code?

```java
public class Test {
    public static void main(String[] args) {
        int a = 5, b = 7;
        int result = a + b;
        System.out.println(result);
    }
}

```",10,11,12,13,,C,The code adds 5 + 7 = 12 and prints the result.,2025-06-20 19:33:21
142,Java Basics,Main Method,Which of the following is a valid main method?,public static int main(String[] args),public void main(String args[]),public static void main(String[] args),static void main(String args),,C,"The main method must be public, static, void, and take String array as parameter.

Only option C meets all requirements.",2025-06-20 19:33:21
143,Working With Java Data Types,Variable Declaration and Initialization,What is the default value of a boolean variable in a class?,true,false,0,null,,B,Instance variables of boolean type are automatically initialized to false in Java.,2025-06-20 19:33:21
144,Working with Selected classes from the Java API,String Class,"What will be the result of the following code?

```java
String s = ""Hello"";
s.concat("" World"");
System.out.println(s);

```",Hello,Hello World,World,Compilation Error,,A,"Strings are immutable in Java.

The concat method returns a new String but doesn't modify the original.

Since the result isn't assigned back to s, s remains ""Hello"".",2025-06-20 19:33:21
145,Creating and Using Arrays,Arrays,Which statement is true about Java arrays?,Arrays are dynamically sized.,Arrays can store different data types.,The size of an array must be specified at declaration.,Arrays are objects in Java.,,D,"In Java, arrays are objects.

They have a fixed size once created, store elements of the same type, and inherit from Object class.",2025-06-20 19:33:21
146,Handling Exceptions,Exception Handling,"Which exception is most likely to occur with the following code?

```java
public static void main(String[] args) {
    Float number = Float.valueOf(args[0]);
}

```",IllegalArgumentException,NumberFormatException,ArrayIndexOutOfBoundsException,NullPointerException,ClassCastException,B,"If args[0] contains a string that cannot be parsed as a float (like ""abc""), Float.valueOf() will throw `NumberFormatException`.

`ArrayIndexOutOfBoundsException` could also occur if no arguments are passed, but `NumberFormatException` is more specific to the valueOf operation.",2025-06-20 19:33:21
147,Using Operators and Decision Constructs,Operators,"What is printed by the following code?

```java
int i = 10;
int j = 5;  
int result = i++ + ++j;
System.out.println(result);

```",15,16,17,18,,B,"i++ uses the current value (10) then increments i to 11. ++j increments j to 6 first, then uses that value.

So 10 + 6 = 16.",2025-06-20 19:33:21
148,Java Basics,Import Statements,"Which lines contain redundant imports that are not necessary for this code to compile?

```java
1. import java.util.Random;
2. import java.lang.System;
3. import java.util.*;
4. import java.lang.*;

public class MyExamCloudOcajps {
    public static void main(String[] args) {
        Random r = new Random();
        System.out.println(r.nextInt(10));
    }
}

```",Only lines 1 and 2,"Only lines 1,2 and 3","Only lines 2,3 and 4","Only lines 1,3 and 4",All,C,"Line 2 (`java.lang.System`) is redundant because java.lang.* is imported by default.

Line 3 (java.util.*) makes line 1 redundant.

Line 4 (java.lang.*) is always redundant as it's automatically imported.",2025-06-20 19:33:21
149,Working with Inheritance,Inheritance,Which keyword is used to inherit a class?,implement,interface,inherits,extends,,D,The 'extends' keyword is used for class inheritance in Java. 'implements' is used for interfaces.,2025-06-20 19:33:21
150,Working with Selected classes from the Java API,String Class,Which of the following classes is immutable?,StringBuilder,String,StringBuffer,All of the above,,B,"String class is immutable - once a String object is created, it cannot be changed.

StringBuilder and StringBuffer are mutable.",2025-06-20 19:33:21
151,Working with Methods and Encapsulation,Access Modifiers,Which of these access specifiers allows access only within the same class?,private,public,protected,default,,A,"The private access modifier restricts access to the same class only.

Other modifiers allow broader access.",2025-06-20 19:33:21
152,Working With Java Data Types,Primitive Data Types,Which of the following is not a primitive type?,int,float,char,String,,D,"String is a class (reference type), not a primitive type.

The primitive types are int, float, char, boolean, byte, short, long, and double.",2025-06-20 19:33:21
153,Handling Exceptions,Exception Handling,Which exception is thrown when dividing an integer by zero in Java?,NullPointerException,ArithmeticException,IllegalArgumentException,NumberFormatException,,B,Integer division by zero throws `ArithmeticException` in Java.,2025-06-20 19:33:21
154,Collections Framework,Set Object,Which collection class maintains insertion order?,HashMap,TreeSet,LinkedHashSet,HashSet,,C,"LinkedHashSet maintains the insertion order of elements.

HashMap and HashSet don't guarantee order, TreeSet maintains sorted order.",2025-06-20 19:33:21
155,Working With Java Data Types,Primitive Data Types,What is the size of a char in Java?,4 bytes,2 bytes,1 byte,Depends on JVM,,B,A char in Java is 2 bytes (16 bits) to support Unicode characters.,2025-06-20 19:33:21
156,Working with Inheritance,Abstract Classes,How do you declare an abstract method?,public void doIt();,public void doIt() {},abstract void doIt();,void abstract doIt();,,C,Abstract methods are declared with the 'abstract' keyword and have no method body (no curly braces).,2025-06-20 19:33:21
157,Advanced Java Features,Threads,Which interface must be implemented to create a thread in Java?,Runnable,Thread,Callable,Executor,,A,"The Runnable interface must be implemented to create a thread.

Thread is a class, not an interface.",2025-06-20 19:33:21
158,Java Basics,Main Method,What is the return type of the main() method?,void,int,String,Object,,A,The main method must have a void return type as specified in the Java Language Specification.,2025-06-20 19:33:21
159,Using Operators and Decision Constructs,Operators,"What will the following code print?

```java
public class Q21 {

    public static void main(String[] args) {

        int x = 20;
        int y = 1;
        System.out.println(x + y);

    }

}

```",21,22,20,19,,A,The code adds 20 + 1 = 21 and prints the result.,2025-06-20 19:33:21
160,Working with Inheritance,Interfaces,Which of the following method declarations can be included in an interface?,"static void print() { System.out.println(""interface""); }",static abstract void print(),default abstract void print(),"default String toString() { return ""a""; }",None of above,A,"Interfaces can have static methods with implementation (since Java 8).

Static methods cannot be abstract, and default methods cannot be abstract either.

Option A is valid - a static method with implementation.",2025-06-20 19:33:21
161,Using Operators and Decision Constructs,Comparison Operators,"What will the following code print?

```java
public class Q22 {

    public static void main(String[] args) {

        boolean result = (5 > 3);
        System.out.println(result);

    }

}

```",true,false,Compilation Error,Runtime Exception,,A,"The expression (5 > 3) evaluates to true, which is then printed.",2025-06-20 19:33:21
162,Using Operators and Decision Constructs,Bitwise Operators,"What will the following code print?

```java
public class Q24 {

    public static void main(String[] args) {

        int a = 10;  // 1010 in binary
        int b = 6;   // 0110 in binary  

        System.out.println(a & b);

    }

}

```",10,8,7,2,,D,Bitwise AND of 1010 & 0110 = 0010 = 2 in decimal.,2025-06-20 19:33:21
163,Using Operators and Decision Constructs,Logical Operators,"What will the following code print?

public class Q23 {
    public static void main(String[] args) {
        boolean a = true;
        boolean b = false;
        System.out.println(a && !b);
    }
}",true,false,Compilation Error,Runtime Exception,,A,The expression evaluates as: true && !false = true && true = true.,2025-06-20 19:33:21
164,Working with Selected classes from the Java API,String Class,"What will the following code print?

```java
public class Q26 {
    public static void main(String[] args) {
        String s = null;
        String result = s + ""world"";
        System.out.println(result);
    }
}

```",world,nullworld,Compilation Error,NullPointerException,,B,"When concatenating with null, Java converts null to the string ""null"", resulting in ""nullworld"".",2025-06-20 19:33:21
165,Using Operators and Decision Constructs,Switch Statement,Which of the following is not allowed in a switch statement?,int,String,boolean,char,,C,"Switch statements don't support boolean type directly.

They support int, char, String (since Java 7), and enum types.",2025-06-20 19:33:21
166,Using Loop Constructs,For Loops,"What will the following code print?

public class Q25 {
    public static void main(String[] args) {
        for(int i = 1; i <= 3; i++) {
            System.out.print(i + "" "");
        }
    }
}",1 2 3,3 2 1,1 2 3 4,Compilation Error,,A,"The loop prints i from 1 to 3: ""1 2 3 "".",2025-06-20 19:33:21
167,Creating and Using Arrays,Arrays,"What will the following code print?

```java
public class Q28 {
    public static void main(String[] args) {
        int[] arr = {0, 1, 2, 3};
        System.out.println(arr[2]);
    }
}

```",2,1,3,0,,A,"Array indexing starts at 0, so arr[2] accesses the third element, which is 2.",2025-06-20 19:33:21
168,Using Operators and Decision Constructs,Operators,"What will the following code print?

```java
public class Q29 {

    public static void main(String[] args) {

        int a = 8;
        int b = 8;
        System.out.println(a + b);

    }

}

```",16,13,10,8,,A,The code adds 8 + 8 = 16 and prints the result.,2025-06-20 19:33:21
169,Working With Java Data Types,Variable Declaration and Initialization,"What will the following code print?

```java
public class Q30 {

    public static void main(String[] args) {

        int[] arr = new int[3];
        System.out.println(arr[0]);

    }

}

```",0,null,Compilation Error,Exception,,A,Arrays of primitive int are initialized with default value 0.,2025-06-20 19:33:21
170,Using Loop Constructs,For Loops,"What will the following code print?

```java
public class Q32 {
    public static void main(String[] args) {
        for(int i = 0; i < 3; i++) {
            System.out.print(i + "" "");
        }
    }
}

```",0 1 2,0 1 2 3,1 2 3,Infinite loop,,A,"The loop prints i from 0 to 2: ""0 1 2 "".",2025-06-20 19:33:21
171,Using Operators and Decision Constructs,Comparison Operators,"What will the following code print?

public class Q27 {
    public static void main(String[] args) {
        String a = new String(""hello"");
        String b = new String(""hello"");
        System.out.println(a == b);
    }
}",true,false,Compilation Error,NullPointerException,,B,"The == operator compares references, not content.

Since a and b are different objects, the result is false.",2025-06-20 19:33:21
172,Working with Selected classes from the Java API,String Class,"What will the following code print?

```java
public class Q34 {
    public static void main(String[] args) {
        String s = ""Java"";
        System.out.println(s.charAt(2));
    }
}

```",v,a,J,Compilation Error,,A,"String indexing starts at 0. charAt(2) returns the character at index 2, which is 'v'.",2025-06-20 19:33:21
173,Working With Java Data Types,Variable Declaration and Initialization,"What will the following code print?

```java
public class Q35 {

    public static void main(String[] args) {

        int x = 10;
        int y = 20;
        System.out.println(y);

    }

}",10,20,0,Compilation Error,,B,"The code simply prints the value of variable y, which is 20.",2025-06-20 19:33:21
174,Using Operators and Decision Constructs,If-Else Statement,"What will the following code print?

public class Q36 {
    public static void main(String[] args) {
        int x = 5;
        if(x > 10) {
            System.out.println(""Greater"");
        } else if(x < 3) {
            System.out.println(""Smaller"");  
        }
    }
}",Greater,Smaller,Nothing,Runtime Exception,,C,"Since x=5 is not > 10 and not < 3, neither condition is true, so nothing is printed.",2025-06-20 19:33:21
175,Working With Java Data Types,Variable Declaration and Initialization,Which one is not a Java keyword?,static,Integer,void,if,,B,"'Integer' is a class name, not a keyword.

Keywords are reserved words like static, void, and if.",2025-06-20 19:33:21
176,Working with Selected classes from the Java API,String Class,"What will the following code print?

```java
public class Q31 {
    public static void main(String[] args) {
        String s = ""ABC"";
        s.toLowerCase();
        System.out.println(s);
    }
}

```",abc,ABC,Compilation Error,NullPointerException,,B,"Strings are immutable.

The toLowerCase() method returns a new string but doesn't modify the original string s.",2025-06-20 19:33:21
177,Working with Selected classes from the Java API,String Class,Which method is used to get the length of a string in Java?,length(),size(),getSize(),count(),,A,The length() method returns the number of characters in a String object.,2025-06-20 19:33:21
178,Working with Selected classes from the Java API,String Class,"What will the following code print?

```java
public class Q33 {
    public static void main(String[] args) {
        String s1 = ""hello"";
        String s2 = ""hello"";
        System.out.println(s1.equals(s2));
    }
}

```",true,false,Compilation Error,Exception,,A,"The equals() method compares the content of strings, both contain ""hello"", so the result is true.",2025-06-20 19:33:21
179,Using Operators and Decision Constructs,Logical Operators,Which operator is used to perform a short-circuit AND?,&,|,&&,||,,C,"The && operator performs short-circuit AND evaluation, meaning if the first operand is false, the second operand is not evaluated.",2025-06-20 19:33:21
180,Working With Java Data Types,Variable Casting and Conversions,"What will the following code print?

```java
public class Q38 {

    public static void main(String[] args) {

        String s1 = ""10"";
        String s2 = ""30"";
        System.out.println(s1 + s2);

    }

}

```",40,1030,3010,4030,,B,"String concatenation occurs, not arithmetic addition, resulting in ""1030"".",2025-06-20 19:33:21
181,Working With Java Data Types,Variable Casting and Conversions,"What will the following code print?

```java
public class Q37 {

    public static void main(String[] args) {

        int i = 128;
        byte b = (byte) i;
        System.out.println(b);

    }

}

```",127,128,-128,Compilation Error,,C,"byte range is -128 to 127.

Value 128 overflows and wraps around to -128.",2025-06-20 19:33:21
182,Working with Selected Classes from Java API,String Class,"What is the output of: 

```java
String s = ""Hello"";

s.concat("" World""); 

System.out.println(s);

```",Hello,Hello World,World,Compilation Error,,A,String is immutable; concat does not modify original,2025-06-20 19:33:38
183,Working with Methods and Encapsulation,Access Modifiers,Which access specifier allows access only within the same class?,private,public,protected,default,,A,private restricts access to the same class,2025-06-20 19:33:38
184,Handling Exceptions,Exception Handling,Which exception is thrown when dividing by zero?,NullPointerException,ArithmeticException,IllegalArgumentException,NumberFormatException,,B,`ArithmeticException` for integer division by zero,2025-06-20 19:33:38
185,Working With Java Data Types,Primitive Data Types,What is the size of a `char` in Java?,4 bytes,2 bytes,1 byte,Depends on JVM,,B,Java chars are 16-bit (2 bytes),2025-06-20 19:33:38
186,Using Operators and Decision Constructs,Switch Statement,Which of the following is not allowed in a `switch` statement?,int,String,boolean,char,,C,boolean is not supported in switch,2025-06-20 19:33:38
187,Advanced Java Features,Threads,Which interface must be implemented to create a thread?,Runnable,Thread,Callable,Executor,,A,Runnable is the standard way to implement a thread,2025-06-20 19:33:38
188,Using Operators and Decision Constructs,Operators,"What will it print? 

```java
int x = 10; 

System.out.println(x++ + ++x);

```",21,22,20,19,,B,"x++ is 10, ++x is 12 → 10+12 = 22",2025-06-20 19:33:38
189,Working With Java Data Types,Primitive Data Types,What is the default value of a `boolean` variable in a class?,true,false,0,null,,B,Class-level booleans default to false,2025-06-20 19:33:38
190,Java Basics,Simple Execution of Java Program,What is the return type of the `main()` method?,void,int,String,Object,,A,main method must return void,2025-06-20 19:33:38
191,Using Operators and Decision Constructs,Ternary Operator,What will it print? int x = 5; System.out.println((x > 2) ? (x < 4) ? 10 : 8 : 7);,10,8,7,Compilation Error,,B,x > 2 is true → x < 4 is false → result is 8,2025-06-20 19:33:38
192,Using Operators and Decision Constructs,Operators,"What is the output of the following code? 

```java
int x = 5; 
int y = ++x * 2; 

System.out.println(y);

```",10,11,12,13,,C,++x increments x to 6 before multiplication; 6*2 = 12,2025-06-20 19:33:38
193,Using Operators and Decision Constructs,Logical Operators,"What will it print? boolean b = false; if (b = true) System.out.println(""True"");",True,False,Compilation Error,Runtime Exception,,A,Assignment inside if evaluates to true,2025-06-20 19:33:38
194,Using Operators and Decision Constructs,Operators,"What is printed? 

```java
int i = 10; 
int j = 5; 
int result = i++ + ++j; 

System.out.println(result);

```",15,16,17,18,,B,"i++ is 10, ++j is 6 → result = 10 + 6 = 16",2025-06-20 19:33:38
195,Creating and Using Arrays,Arrays,"What will it print? 

```java
int[] arr = {1, 2, 3}; 

for(int i = 0; i < arr.length; i++) { 

  System.out.print(arr[i] + "" ""); 

}

```",1 2 3,3 2 1,1 2 3 4,Compilation Error,,A,Basic for loop over array prints 1 2 3,2025-06-20 19:33:38
196,Using Operators and Decision Constructs,Operators,"What will it print? 

```java
int x = 2; 
int y = 5; 
x *= y + 3; 

System.out.println(x);

```",16,13,10,8,,A,x *= y + 3 → x = x * (y+3) = 2*8 = 16,2025-06-20 19:33:38
197,Working with Selected Classes from Java API,String Class,"What will it print?

```java
String s1 = new String(""OCA""); 
String s2 = ""OCA""; 

System.out.println(s1 == s2);

```",true,false,Compilation Error,NullPointerException,,B,new String() creates new object,2025-06-20 19:33:38
198,Working with Selected Classes from Java API,String Class,"What will it print?

```java
String str = ""abc""; 
str.toUpperCase(); 

System.out.println(str);

```",abc,ABC,Compilation Error,NullPointerException,,A,String is immutable; str remains unchanged,2025-06-20 19:33:38
199,Using Operators and Decision Constructs,Operators,"What will it print? 

```java
int x = 7; 
int y = 3; 

System.out.println(x % y);

```",2,1,3,0,,B,7 % 3 = 1,2025-06-20 19:33:38
200,Working with Selected Classes from Java API,String Class,"What will it print?

```java
String s1 = ""java""; 
String s2 = ""java""; 

System.out.println(s1 == s2);

```",true,false,Compilation Error,Runtime Exception,,A,String literals are interned → same reference,2025-06-20 19:33:38
201,Using Operators and Decision Constructs,Logical Operators,"What will it print? 

```java
int x = 5; 
int y = 10; 

System.out.println(x > 2 && y < 15);

```",true,false,Compilation Error,Exception,,A,Both conditions are true,2025-06-20 19:33:38
202,Using Operators and Decision Constructs,If-Else Statement,"What will it print? int x = 0; if(x) { System.out.println(""Zero""); }",Zero,Nothing,Compilation Error,Runtime Exception,,C,Cannot use int as boolean,2025-06-20 19:33:38
203,Working With Java Data Types,Variable Casting and Conversions,"What will it print? 

```java
byte b = 127; 
b++; 

System.out.println(b);

```",127,128,-128,Compilation Error,,C,Overflow of byte wraps around to -128,2025-06-20 19:33:38
204,Working with Selected Classes from Java API,String Class,"What will it print?

```java
System.out.println(10 + 20 + ""30"");

```",30,1030,3030,3030.0,,C,10+20=30 then string concat = 3030,2025-06-20 19:33:38
205,Working with Selected Classes from Java API,String Class,"What will it print?

```java
String a = ""Hello""; 
String b = ""Hel"" + ""lo""; 

System.out.println(a == b);

```",true,false,Compilation Error,Runtime Exception,,A,Compile-time string concatenation is interned,2025-06-20 19:33:38
206,Working with Selected Classes from Java API,String Class,"What will it print?

```java
String str = ""Java""; 

System.out.println(str.charAt(2));

```",v,a,J,Compilation Error,,A,char at index 2 is 'v',2025-06-20 19:33:38
207,Creating and Using Arrays,Multi-dimensional Arrays,"What will it print? 

```java
int[][] matrix = new int[2][]; 
matrix[0] = new int[3]; 
matrix[1] = new int[2]; 

System.out.println(matrix[0].length + matrix[1].length);

```",4,5,6,Compilation Error,,B,"matrix[0].length = 3, matrix[1].length = 2 → 3+2=5

You're creating a ""jagged"" 2D array (rows with different column sizes), and printing the total number of elements across both rows.

✅ matrix[0] has 3 elements
✅ matrix[1] has 2 elements
➡️ Total = 5",2025-06-20 19:33:38
208,Creating and Using Arrays,Arrays,"What will it print? 

```java
int[] arr = {1, 2, 3}; 
System.out.println(arr[3]);

``",3,IndexOutOfBoundsException,Compilation Error,null,,B,Accessing arr[3] throws `ArrayIndexOutOfBoundsException`,2025-06-20 19:33:38
209,Creating and Using Arrays,Array Declaration and Initialization,"What will it print? 

```java
int[] arr = new int[2]; 
System.out.println(arr[0]);

```",0,null,Compilation Error,Exception,,A,Default value of int array element is 0,2025-06-20 19:33:38
210,Handling Exceptions,Exception Handling,"What will it print?

```java
String[] names = new String[2]; 

System.out.println(names[0].length());

```",0,null,Compilation Error,NullPointerException,,D,"names[0] is null, so calling length() throws NPE",2025-06-20 19:33:38
211,Using Loop Constructs,Do-While Loops,"What will it print? int i = 0; do { System.out.print(i + "" ""); } while(i++ < 2);",0 1 2,0 1 2 3,1 2 3,Infinite loop,,A,Post-increment allows print before check,2025-06-20 19:33:38
212,Using Operators and Decision Constructs,Ternary Operator,"What will it print? int a = 10, b = 20; int max = (a > b) ? a : b; System.out.println(max);",10,20,0,Compilation Error,,B,b is greater → max = b,2025-06-20 19:33:38
213,Creating and Using Arrays,Array Manipulation,"What will it print? 

```java
int[] a = {1, 2, 3}; 
int[] b = a; 

b[0] = 10; 

System.out.println(a[0]);

```",1,10,0,Compilation Error,,B,"Arrays in Java are objects and are passed by reference.

Assigning one array to another does not create a copy — both variables refer to the same array.",2025-06-20 19:33:38
214,Handling Exceptions,Exception Handling,"What will it print? 

```java
int x = Integer.parseInt(""abc"");

```",Invalid format,abc,Compilation Error,Runtime Error,,A,'abc' cannot be parsed as integer; throws `NumberFormatException`,2025-06-20 19:33:38
215,Creating and Using Arrays,Multi-dimensional Arrays,"What will it print? 

```java
int[][] grid = new int[1][2]; 

System.out.println(grid.length + "" "" + grid[0].length);

```",1 2,2 1,Compilation Error,1 0,,A,"grid[0].length = 2; grid.length = 1

In Java, grid.length gives the number of rows.
grid[0].length gives the number of columns in the first row.
2D arrays in Java are really arrays of arrays.",2025-06-20 19:33:38
216,Handling Exceptions,Exception Handling,What will happen? int[] arr = new int[-2];,Length: -2,Compilation Error,NegativeArraySizeException,0,,C,Negative array size throws runtime exception,2025-06-20 19:33:38
217,Working with Selected Classes from Java API,String Class,"What will it print?

```java
String s = null; 

System.out.println(s + ""world"");

```",world,nullworld,Compilation Error,NullPointerException,,B,null + string → 'nullworld',2025-06-20 19:33:38
218,Creating and Using Arrays,Arrays,"What will it print? 

```java
int[] data = {10, 20, 30}; 

for(int i = 0; i <= data.length; i++) System.out.print(data[i] + "" "");",10 20 30,10 20 30 0,Compilation Error,ArrayIndexOutOfBoundsException,,D,"i <= data.length leads to out-of-bounds

The loop uses i <= data.length, which causes i = 3 to be accessed.

But array indices only go from 0 to 2, so it throws `ArrayIndexOutOfBoundsException`.

Use i < data.length to fix it.",2025-06-20 19:33:38
219,Creating and Using Arrays,Multi-dimensional Arrays,"What will it print?

```java
String[][] text = new String[2][]; 
text[0] = new String[]{""A"", ""B""}; 
text[1] = new String[]{""C""}; 

System.out.println(text[1][0]);

```",A,B,C,null,,C,"text[1][0] is ""C""",2025-06-20 19:33:38
220,Java Basics,Main Characteristics of Java,Which of the following is a valid `main` method?,public static int main(String[] args),public void main(String args[]),public static void main(String[] args),static void main(String args),,C,Only public static void main(String[] args) is valid,2025-06-20 19:33:38
221,Handling Exceptions,Exception Handling,"What will it print? 

```java
throw new IllegalArgumentException(""Bad input"");

```",Bad input,Caught: Bad input,Compilation Error,IllegalArgumentException,,B,Exception caught and printed,2025-06-20 19:33:38
222,Using Loop Constructs,For Loops,"What will it print? int[] values = {1, 2, 3, 4}; for (int i = values.length - 1; i >= 0; i--) System.out.print(values[i] + "" "");",4 3 2 1,1 2 3 4,Compilation Error,Runtime Error,,A,Reverse order printing with for-loop,2025-06-20 19:33:38
223,Handling Exceptions,Exception Handling,"What will it print?

Integer.parseInt(""10.5"");",Format error,10.5,Compilation Error,Runtime Error,,A,10.5 is not valid integer → `NumberFormatException`,2025-06-20 19:33:38
224,Handling Exceptions,Exception Handling,"What will it print?

```java
Object[] obj = new String[2]; 

obj[0] = 10;

```",Done,Compilation Error,ArrayStoreException,null,,C,Storing Integer in String[] throws `ArrayStoreException`,2025-06-20 19:33:38
225,Creating and Using Arrays,Arrays,"What will it print?

```java
String[] arr = {""one"", ""two"", ""three""}; 

System.out.println(arr[arr.length]);

```",three,Compilation Error,IndexOutOfBoundsException,Runtime Error,,C,"Index arr.length is out of bounds

The array has 3 elements, so valid indices are 0, 1, and 2. arr.length is 3, so arr[arr.length] tries to access arr[3], which doesn't exist.

This causes an `ArrayIndexOutOfBoundsException` at runtime.

Always use index < length.",2025-06-20 19:33:38
227,Using Operators and Decision Constructs,If-Else Statement,What will it print? if (i = 5) { },Equal,Nothing,Compilation Error,Runtime Error,,C,Can't assign inside condition directly,2025-06-20 19:33:38
228,Working With Java Data Types,Variable Declaration and Initialization,"What will it print? 

```java
int x; //local variable

System.out.println(x);

```",0,Compilation Error,Runtime Exception,null,,B,Local variable 'x' not initialized,2025-06-20 19:33:38
229,Working With Java Data Types,Variable Casting and Conversions,"What will it print? 

```java
byte b = 10; 
b = b + 1;

```",11,Compilation Error,10,Runtime Error,,B,b + 1 = int → must cast to byte,2025-06-20 19:33:38
230,Working with Selected Classes from Java API,String Class,"What will it print?

```java
String s1 = ""Hello""; 
String s2 = new String(""Hello""); 

System.out.println(s1 == s2);

```",true,false,Compilation Error,Runtime Error,,B,"== compares references, not values",2025-06-20 19:33:38
231,Handling Exceptions,Exception Handling,"What will it print? 

```java
int[] nums = new int[5]; 

nums[10] = 3;

```",Caught: java.lang.Exception,Caught: java.lang.ArrayIndexOutOfBoundsException,Compilation Error,Runtime Error,,B,Index 10 is out of bounds; exception caught,2025-06-20 19:33:38
232,Working With Java Data Types,Variable Casting and Conversions,"What will it print? 

```java
final int x = 100; 
byte b = x; 

System.out.println(b);

```",100,Compilation Error,0,Runtime Exception,,A,final constant fits in byte; implicit cast allowed,2025-06-20 19:33:38
233,Using Loop Constructs,Enhanced For Loops,"What will it print?

String[] vals = {""one"", ""two"", ""three""}; for(String s : vals) System.out.print(s + "" "");",one two three,three two one,Compilation Error,Runtime Error,,A,Enhanced for-loop prints in order,2025-06-20 19:33:38
234,Working with Selected Classes from Java API,String Class,"What will it print?

```java
System.out.println(""1"" + 2 + 3);

```",123,6,33,15,,A,Left-to-right string concatenation,2025-06-20 19:33:38
235,Working With Java Data Types,Primitive Data Types,"What will it print? 

```java
char c = 65; 

System.out.println(c);

```",A,65,Compilation Error,null,,A,65 is ASCII for 'A',2025-06-20 19:33:38
236,Working With Java Data Types,Variable Casting and Conversions,"What will it print? 

```java
double d = 5 / 2; 

System.out.println(d);

```",2.0,2.5,Compilation Error,Runtime Exception,,A,5/2 is integer division first → 2 → then widened,2025-06-20 19:33:38
237,Working With Java Data Types,Variable Casting and Conversions,"What will it print? 

```java
int a = 5; 
a += 3.5;

```",8,8.5,Compilation Error,Runtime Error,,C,+= with double → implicit cast not allowed without loss,2025-06-20 19:33:38
238,Creating and Using Arrays,Arrays,"What will it print? 

```java
int[] arr = new int[]{1, 2, 3}; 

System.out.println(arr.length());

```",3,Compilation Error,Runtime Error,0,,B,"Array has 'length' field, not method

The code causes a compile-time error because arr.length() is invalid.

In Java, arrays use the field length (no parentheses), not a method.

Correct usage is arr.length.

Using length() tries to call a method that doesn’t exist for arrays.",2025-06-20 19:33:38
239,Working with Inheritance,Polymorphism,"What will it print?

```java
Object o = new int[]{1, 2, 3}; 

System.out.println(o instanceof Object);

```",true,false,Compilation Error,Runtime Exception,,A,Arrays are objects,2025-06-20 19:33:38
240,Working With Java Data Types,Variable Casting and Conversions,"What will it print? 

```java
final int x = 100; 
byte b = x; 

System.out.println(b);

```",100,Compilation Error,0,Runtime Error,,A,final constant in byte range can be implicitly cast,2025-06-20 19:33:38
241,Working With Java Data Types,Variable Declaration and Initialization,"What will it print? 

```java
static int x = 10; 
int x = 20; 

System.out.println(x);

```",10,20,Compilation Error,Runtime Error,,C,Local variable shadows class variable,2025-06-20 19:33:38
242,Creating and Using Arrays,Arrays,"What will it print? 

```java
int[] a = new int[3]; 

System.out.println(a[3]);

```",0,3,Compilation Error,ArrayIndexOutOfBoundsException,,D,Index 3 out of bounds,2025-06-20 19:33:38
243,Working with Selected Classes from Java API,String Class,"What will it print?

System.out.println(10 + 20 + ""30"");",30,1030,3030,3030.0,,C,"10+20=30, then string concat",2025-06-20 19:33:38
244,Working With Java Data Types,Variable Casting and Conversions,"What will it print? 

```java
short s = 10; 

s = s * 5;

```",50,Compilation Error,Runtime Error,10,,B,s * 5 promotes to int → must cast to short,2025-06-20 19:33:38
245,Using Operators and Decision Constructs,Ternary Operator,"What will it print? true ? ""yes"" : 10;",yes,10,Compilation Error,Runtime Error,,C,Incompatible types between true/false branches,2025-06-20 19:33:38
246,Working with Selected Classes from Java API,String Class,"What will it print?

```java
String str = ""null""; 

System.out.println(str == null);

```",true,false,null,Compilation Error,,B,"""null"" is a string literal, not null",2025-06-20 19:33:38
247,Using Loop Constructs,For Loops,"What will it print? for (System.out.print(""A""); i < 1; i++) System.out.print(""B""); System.out.print(""C"");",ABC,BAC,ACB,Compilation Error,,A,"'A' prints first from loop init, then loop body → 'B', then 'C'",2025-06-20 19:33:38
248,Handling Exceptions,Exception Handling,What will it print? int x = 10 / 0;,ArithmeticException,0,Compilation Error,Runtime Exception,,A,"Divide by zero throws `ArithmeticException`, caught and printed",2025-06-20 19:33:38
249,Handling Exceptions,Exception Handling,"What will it print?

```java
String[] list = null; 

System.out.println(list[0]);

```",null,Caught NullPointerException,Compilation Error,Runtime Error,,B,Accessing list[0] on null array throws `NullPointerException`,2025-06-20 19:33:38
250,Creating and Using Arrays,Array Declaration and Initialization,"What will it print? 

```java
int[] nums = new int[0]; 

System.out.println(nums.length);

```",0,1,Compilation Error,Exception,,A,Zero-length array is legal; prints 0,2025-06-20 19:33:38
251,Using Operators and Decision Constructs,Switch Statement,"What will it print? 

```java
switch(x) { 

  case 5: print(""Five""); 
  default: print(""Default""); 

}

```",Five,Default,Five Default,Compilation Error,,C,No break → fall-through occurs,2025-06-20 19:33:38
252,Working with Selected classes from the Java API,Map Object,Which `Map` implementation maintains the insertion order of entries?,HashMap,TreeMap,LinkedHashMap,ConcurrentHashMap,EnumMap,C,`LinkedHashMap` maintains the insertion order of keys. `HashMap` does not. `TreeMap` sorts keys. `ConcurrentHashMap` and `EnumMap` have no guaranteed insertion order.,2025-06-20 19:57:15
253,Working with Selected classes from the Java API,Map Object,What happens when you try to retrieve a value for a key that does not exist in a `HashMap`?,The method throws an exception,Returns -1,Returns null,Returns Optional.empty(),Compilation error,C,"If a key is not present in a HashMap, the `get()` method returns `null`.

It does not throw an exception or return -1 by default.",2025-06-20 19:57:15
254,Working with Selected classes from the Java API,Map Object,Which of the following maps is most suitable for concurrent access by multiple threads?,Hashtable,HashMap,ConcurrentHashMap,TreeMap,LinkedHashMap,C,"`ConcurrentHashMap` is designed for high-concurrency environments. `Hashtable` is synchronized but inefficient. `HashMap`, `TreeMap`, and `LinkedHashMap` are not thread-safe.",2025-06-20 19:57:15
255,Working with Selected classes from the Java API,Map Object,Which map uses `==` instead of `.equals()` to compare keys?,EnumMap,TreeMap,IdentityHashMap,WeakHashMap,HashMap,C,`IdentityHashMap` compares keys using reference equality (`==`).,2025-06-20 19:57:15
256,Working with Selected classes from the Java API,Map Object,Which implementation is designed to store enum constants as keys efficiently?,TreeMap,EnumMap,HashMap,LinkedHashMap,Properties,B,`EnumMap` is specifically designed for enum key efficiency.,2025-06-20 19:57:15
257,Working with Selected classes from the Java API,Map Object,What is the result of calling `map.clear()` on a populated map?,All values become null,Keys are set to null,All entries are removed,Map becomes immutable,It throws an exception,C,`clear()` removes all entries from the map — size becomes zero.,2025-06-20 19:57:15
258,Working with Selected classes from the Java API,Map Object,Which of the following is a legacy synchronized map?,HashMap,TreeMap,LinkedHashMap,Hashtable,EnumMap,D,`Hashtable` is a legacy class and thread-safe by default.,2025-06-20 19:57:15
259,Working with Selected classes from the Java API,Map Object,Which statement is TRUE about `putIfAbsent()`?,Replaces existing value,Deletes the value if present,Only inserts if key is not present,Throws exception if key exists,Same as `put()`,C,`putIfAbsent()` only inserts if the key is missing.,2025-06-20 19:57:15
260,Working with Selected classes from the Java API,Map Object,"What does `getOrDefault(key, defaultVal)` do?",Always returns defaultVal,Throws if key is missing,"Returns value if present, otherwise default",Returns Optional,None of the above,C,"Returns associated value if key exists, otherwise the provided default value.",2025-06-20 19:57:15
261,Working with Selected classes from the Java API,Map Object,"What will this print?

```java
Map<String, String> map = new TreeMap<>();
map.put(""B"", ""Banana"");
map.put(""A"", ""Apple"");
System.out.println(map);

```","{B=Banana, A=Apple}","{A=Apple, B=Banana}",Random order,Compilation error,Runtime exception,B,"`TreeMap` keeps keys sorted.

Output will be in key order: `{A=Apple, B=Banana}`.",2025-06-20 19:57:15
262,Working with Selected classes from the Java API,Map Object,"What is the output of the following code?

```java
Map<String, Integer> map = new HashMap<>();
map.put(""A"", 1);
map.put(""A"", 2);
System.out.println(map.get(""A""));

```",1,2,null,Compilation error,Runtime exception,B,"The second `put` replaces the first value.

The output is `2`.",2025-06-20 19:57:15
263,Working with Selected classes from the Java API,Map Object,Which method returns a `Set` of key-value mappings in a `Map`?,keySet(),entrySet(),values(),pairs(),mapItems(),B,"`entrySet()` returns a `Set<Map.Entry<K, V>>` of key-value pairs.",2025-06-20 19:57:15
264,Working with Selected classes from the Java API,Map Object,Which of the following methods is used to loop through a map efficiently in Java 8?,map.each(),for(map),map.entries(),map.forEach(),map.iterate(),D,`forEach(BiConsumer)` is the Java 8 idiomatic way to loop over a map.,2025-06-20 19:57:15
265,Working with Selected classes from the Java API,Map Object,Which method removes all entries from a map?,empty(),clear(),reset(),nullify(),drop(),B,`clear()` is used to remove all key-value pairs from a map.,2025-06-20 19:57:15
266,Working with Selected classes from the Java API,Map Object,Choose the correct import statement for `ConcurrentHashMap`.,import java.util.ConcurrentHashMap;,import java.concurrent.ConcurrentHashMap;,import java.util.concurrent.ConcurrentHashMap;,import concurrent.ConcurrentHashMap;,import map.ConcurrentHashMap;,C,`ConcurrentHashMap` is part of the `java.util.concurrent` package.,2025-06-20 19:57:15
267,Working with Selected classes from the Java API,Map Object,What is the return type of `values()` in Map?,List,Collection,Array,Set,Map,B,`values()` returns a `Collection<V>` of all values in the map.,2025-06-20 19:57:15
268,Working with Selected classes from the Java API,Map Object,Which method checks if a map is empty?,hasEntries(),size() == 0,isEmpty(),length() == 0,None of the above,C,`isEmpty()` returns true if the map contains no entries.,2025-06-20 19:57:15
269,Working with Selected classes from the Java API,Map Object,Which of these methods exist in the `Map` interface?,"push(), pop(), peek()","add(), remove(), size()","put(), get(), remove()","insert(), delete(), select()","append(), prepend()",C,"`put()`, `get()` and `remove()` are standard Map operations.",2025-06-20 19:57:15
270,Working with Selected classes from the Java API,Map Object,Which `Map` implementation does NOT allow `null` keys or values?,HashMap,TreeMap,Hashtable,LinkedHashMap,ConcurrentHashMap,E,"Both `Hashtable` and `ConcurrentHashMap` do not allow null keys or values.

However, `ConcurrentHashMap` is the more modern choice for concurrent access.",2025-06-20 19:57:15
271,Working with Selected classes from the Java API,Map Object,"What is the output?

```java
Map<String, String> m = new LinkedHashMap<>();
m.put(""x"", ""1"");
m.put(""y"", ""2"");
System.out.println(m);

```","{y=2, x=1}","{x=1, y=2}",Random order,Runtime error,Compilation error,B,"`LinkedHashMap` preserves insertion order, so the output is `{x=1, y=2}`.",2025-06-20 19:57:15
272,Working with Selected classes from the Java API,Map Object,Which map implementation is best for a memory-sensitive cache?,TreeMap,IdentityHashMap,EnumMap,WeakHashMap,ConcurrentHashMap,D,`WeakHashMap` allows keys to be GC'd — great for memory-sensitive caching.,2025-06-20 19:57:15
273,Working with Selected classes from the Java API,Map Object,Which of these will cause a `NullPointerException` in a `TreeMap`?,null value,duplicate value,null key,null entry,empty key,C,"`TreeMap` does not allow `null` keys, as it uses `compareTo()` internally.",2025-06-20 19:57:15
274,Working with Selected classes from the Java API,Map Object,What does `entrySet()` return?,Map,List,Set of keys,Set of values,Set of entries,E,"`entrySet()` returns a `Set<Map.Entry<K, V>>` representing all key-value pairs.",2025-06-20 19:57:15
275,Working with Selected classes from the Java API,Map Object,Which map does NOT guarantee ordering of keys or entries?,TreeMap,LinkedHashMap,HashMap,EnumMap,All do,C,`HashMap` has no guarantees about key or entry order.,2025-06-20 19:57:15
276,Working with Selected classes from the Java API,Map Object,Which method returns an unmodifiable view of a `Map`?,HashMap,ConcurrentHashMap,TreeMap,Collections.unmodifiableMap(),Map.copyOf(),D,"`Collections.unmodifiableMap()` creates an unmodifiable view of the specified map.

This is available in Java SE 8.",2025-06-20 19:57:15
277,Working with Selected classes from the Java API,Map Object,Which method is used to safely compute a value only if key is absent?,compute(),putIfPresent(),computeIfAbsent(),merge(),addOrCreate(),C,`computeIfAbsent()` adds a value only if the key isn’t already present.,2025-06-20 19:57:15
278,Working with Selected classes from the Java API,Map Object,Which statement about `WeakHashMap` is correct?,Keys are garbage collected if weakly reachable,It sorts keys,It doesn't allow nulls,It’s faster than HashMap,It's thread-safe,A,`WeakHashMap` allows keys to be GC'd when no strong refs exist.,2025-06-20 19:57:15
279,Working with Selected classes from the Java API,Map Object,What interface does `TreeMap` implement in addition to `Map`?,NavigableMap,SortedSet,HashableMap,Queue,SerializableMap,A,`TreeMap` implements `NavigableMap` for range and sorted operations.,2025-06-20 19:57:15
280,Working with Selected classes from the Java API,Map Object,What is the default return of `get()` if the key doesn’t exist?,null,false,0,exception,empty string,A,`get()` returns `null` if the key is not present.,2025-06-20 19:57:15
281,Working with Selected classes from the Java API,Map Object,What does `replaceAll()` do in a `Map`?,Deletes all values,Applies a function to each entry,Converts map to immutable,Replaces keys,Throws error,B,`replaceAll()` applies a remapping function to all key-value pairs.,2025-06-20 19:57:15
282,Java 8 Features,Lambda Expressions,Which of the following is a correct lambda syntax with one parameter and no type declaration?,x -> x + 1,(int x) => x + 1,x => x + 1,(x): x + 1,x -> return x + 1,A,"For a single parameter with no type, parentheses are optional. 'x -> x + 1' is valid syntax.",2025-06-22 00:03:12
283,Java 8 Features,Lambda Expressions,Which of these is NOT a valid lambda?,"() -> System.out.println(""Hi"")","(a, b) -> a + b",x -> return x * 2;,x -> x * x,(int x) -> { return x; },C,"The 'return' keyword requires a block body (using `{}`).

The expression `x -> return x * 2;` is invalid because it mixes expression syntax with a `return` statement.

It should be either `x -> x * 2` or `x -> { return x * 2; }`.",2025-06-22 00:03:12
284,Java 8 Features,Lambda Expressions,Which lambda expression correctly returns true if a string is empty?,s -> s.length() == 0,(s) -> return s == null;,"s => s.equals("")",(String s) => s.isEmpty(),() -> s.isEmpty(),A,"A valid lambda to test string emptiness is 's -> s.length() == 0' or 's -> s.isEmpty()'.

Option A uses correct syntax and logic.",2025-06-22 00:03:12
285,Java 8 Features,Lambda Expressions,Which statement about lambda expressions in Java is true?,They can have multiple abstract methods,They are valid only inside classes,They implement functional interfaces,They must always use return keyword,They are only used in interfaces,C,"Lambdas work with functional interfaces, which have exactly one abstract method.",2025-06-22 00:03:12
286,Java 8 Features,Lambda Expressions,Which of the following interfaces is NOT functional?,Runnable,Comparator,Function,Thread,Predicate,D,"`Thread` is a class, not a functional interface.

Others each have one abstract method.",2025-06-22 00:03:12
287,Java 8 Features,Lambda Expressions,Choose the correct syntax for a lambda with no parameters.,() -> return 10,-> 10,() -> 10,return () -> 10,{} -> 10,C,"No parameter lambdas must include `()`.

Correct form is `() -> 10`.",2025-06-22 00:03:12
288,Java 8 Features,Lambda Expressions,Which method must be implemented in a `Runnable` lambda?,void start(),void go(),void execute(),void run(),void accept(),D,"`Runnable` has one method: `void run()`.

Lambdas for `Runnable` must implement this.",2025-06-22 00:03:12
289,Java 8 Features,Lambda Expressions,"What does the following code print?

```java
Predicate<String> p = s -> s.isEmpty();
System.out.println(p.test(""""));

```",false,true,null,Compilation error,Runtime exception,B,"The empty string is passed to the predicate.

Since it is empty, `isEmpty()` returns true.",2025-06-22 00:03:12
290,Java 8 Features,Lambda Expressions,Which lambda expression has a syntax error?,"(a, b) -> a + b",x -> x * 2,(x) -> { return x + 1; },"a, b -> a + b","() -> System.out.println(""Hello"")",D,"You must use parentheses around parameters when there are two or more: '(a, b) -> a + b' is correct, 'a, b -> a + b' is not.",2025-06-22 00:03:12
291,Java 8 Features,Lambda Expressions,Which of the following is true about functional interfaces?,They must have more than one abstract method,They can have no abstract methods,They can have one abstract method only,They cannot have default methods,They must return void,C,"Functional interfaces must have exactly one abstract method.

They can have default or static methods too.",2025-06-22 00:03:12
292,Java 8 Features,Lambda Expressions,What is the return type of a lambda implementing `Supplier<String>`?,boolean,int,void,String,Object,D,"`Supplier<T>` provides a result of type `T`.

For `Supplier<String>`, return type is `String`.",2025-06-22 00:03:12
293,Java 8 Features,Lambda Expressions,Which functional interface is best used to return a value based on input?,Predicate,Consumer,Runnable,Function,Comparator,D,"`Function<T, R>` takes input and returns a result.

Perfect for transformation use cases.",2025-06-22 00:03:12
294,Java 8 Features,Lambda Expressions,Which of these best describes the role of a lambda in Java?,It replaces loops,It enables multithreading,It allows passing behavior as data,It returns multiple values,It creates annotations,C,"Lambdas allow behavior (code blocks) to be passed as data, typically to methods.",2025-06-22 00:03:12
295,Java 8 Features,Lambda Expressions,"What is the output?

```java
Function<Integer, Integer> square = x -> x * x;
System.out.println(square.apply(5));

```",25,10,5,Compilation error,Runtime exception,A,5 squared is 25. `Function.apply()` returns the transformed value.,2025-06-22 00:03:12
296,Java 8 Features,Lambda Expressions,"What is the output of the following code?

```java
Consumer<String> c = s -> System.out.println(s.toUpperCase());
c.accept(""lambda"");

```",lambda,LAMBDA,null,Compilation error,Runtime exception,B,The lambda converts the string to upper case: output is 'LAMBDA'.,2025-06-22 00:03:12
297,Working with Inheritance,Virtual vs Non-Virtual Methods,"What is the output of the following code?

```java
class Parent {
    static void greet() {
        System.out.println(""Hello from Parent"");
    }
}
class Child extends Parent {
    static void greet() {
        System.out.println(""Hello from Child"");
    }
}
public class Test {
    public static void main(String[] args) {
        Parent p = new Child();
        p.greet();
    }
}

```",Hello from Parent,Hello from Child,Compilation error,Runtime exception,None of the above,A,"This is method hiding, not overriding, because the methods are static.

The method call is resolved at compile time using the reference type (Parent), so 'Hello from Parent' is printed.",2025-06-23 18:10:36
298,Working with Inheritance,Virtual vs Non-Virtual Methods,Which statement about static methods and inheritance is correct?,Static methods are inherited and overridden,Static methods can be hidden but not overridden,Static methods behave polymorphically,Static methods are always private,Static methods are accessed through object references,B,"In Java, static methods are hidden (not overridden).

They are resolved at compile time using the reference type, not at runtime using the object type.",2025-06-23 18:10:39
299,Working with Inheritance,Virtual vs Non-Virtual Methods,"What happens when compiling and running the following code?

```java
class A {
    static void test() {
        System.out.println(""A"");
    }
}
class B extends A {
    void test() {
        System.out.println(""B"");
    }
}
public class Main {
    public static void main(String[] args) {
        B.test();
    }
}

```",Prints A,Prints B,Compilation error,Runtime exception,None of the above,C,"You cannot override a static method with a non-static method in Java.

This causes a compilation error because 'test()' in class B is not static.",2025-06-23 18:10:41
300,Working with Inheritance,Virtual vs Non-Virtual Methods,"Given the following classes:

```java
class Animal {
    static void speak() {
        System.out.println(""Animal sound"");
    }
}
class Dog extends Animal {
    static void speak() {
        System.out.println(""Bark"");
    }
}

```

Which output will result from this code?

```java
Animal a = new Dog();
a.speak();

```",Animal sound,Bark,Compilation error,Runtime exception,None of the above,A,"Static methods are hidden, not overridden.

So 'a.speak()' resolves to 'Animal.speak()' because the reference type is Animal.",2025-06-23 18:10:41
301,Working with Inheritance,Virtual vs Non-Virtual Methods,Which of the following best describes method hiding in Java?,Occurs when a subclass defines a static method with the same signature as a static method in its superclass,Occurs when a subclass defines an instance method with the same name as a static method in the superclass,Occurs when access modifiers change between overridden methods,Occurs when a method is overridden using final keyword,It is a form of runtime polymorphism,A,"Method hiding occurs when a static method in a subclass has the same signature as a static method in its superclass.

It is resolved at compile-time using reference type.",2025-06-23 18:10:41
302,Working with Methods and Encapsulation,Pass by Value vs Reference,"What is the result of running the following code?

```java
class Product {
    double price;
}

public class Test {
    public void updatePrice(Product product, double price) {
        price = price * 2;
        product.price = product.price + price;
    }

    public static void main(String[] args) {
        Product prt = new Product();
        prt.price = 200;
        double newPrice = 100;

        Test t = new Test();
        t.updatePrice(prt, newPrice);

        System.out.println(prt.price + "" : "" + newPrice);
    }
}

```",200.0 : 100.0,400.0 : 200.0,400.0 : 100.0,Compilation error,nothing,C,"The method doubles the value of 'price' parameter (local), but only 'product.price' is updated by adding this doubled value. 'newPrice' remains unchanged because primitives are passed by value.",2025-06-25 18:19:53
303,Working With Java Data Types,Variable Casting and Conversions,"What happens when compiling the following code?

```java
public class Test {
    public static void main(String[] args) {
        Short s1 = 200;
        Integer s2 = 400;
        Long s3 = (long) s1 + s2;   // line n1
        String s4 = (String) (s3 * s2); // line n2
        System.out.println(""Sum is "" + s4);
    }
}

```",Sum is 600,Compilation error at line n1,Compilation error at line n2,Runtime exception at line n1,Runtime exception at line n2,C,"The expression '(s3 * s2)' results in a primitive 'long' type, which cannot be cast to 'String'.

Java does not allow casting primitive numeric types to 'String' directly, leading to a compilation error at line n2.",2025-06-25 18:19:53
304,Using Loop Constructs,For Loops,"What happens when compiling the following code?
1. public class Whizlabs {
2.     public static void main(String[] args) {
3.         int sum = 0;
4.         for (int x = 0; x <= 10; x++)
5.             sum += x;
6.         System.out.print(""Sum for 0 to "" + x);
7.         System.out.println("" = "" + sum);
8.     }
9. }",Sum for 0 to 0 = 55,Sum for 0 to 10 = 55,Compilation fails due to an error in line 6,Compilation fails due to an error in line 7,Runtime Exception,C,"The variable 'x' is declared inside the for loop, so its scope is limited to the loop.

It is not accessible on line 6, which causes a compile-time error.",2025-06-25 19:26:31
305,Working with Selected Classes from Java API,Date Time API,"What is the output of the following code?

```java
import java.time.LocalDate;
import java.time.Period;

public class Whizlabs {
    public static void main(String[] args) {
        LocalDate date = LocalDate.of(2015, 3, 26);
        Period p = Period.ofDays(1);
        System.out.println(date.plus(p));
    }
}

```",2015-03-27,2015-04-27,2015-02-27,Compilation fails due to an error at line 6,Compilation fails due to an error at line 8,A,"The code adds a Period of 1 day to March 26, 2015.

Month numbering is 1-based, so '3' is March.

The result is 2015-03-27.",2025-06-25 19:26:31
306,Working With Java Data Types,Wrapper Classes,"What is the result of executing the following code?

```java
Integer number = Integer.valueOf(""808.1"");

```",The value of the variable number will be 808.1,The value of the variable number will be 808,The value of the variable number will be 0,A NumberFormatException will be thrown,Compilation error,D,"The string '808.1' is not a valid format for Integer.valueOf(), so it throws a `NumberFormatException` at runtime.",2025-06-25 19:26:31
307,Working with Inheritance,Method Overriding,"Which modifier can be used in the subclass method declaration below to make it valid?

```java
public class Exam {
    void method() {}
}

public class OCAJP extends Exam {
    _____ void method() {}
}

```",abstract,final,private,default,int,B,"Using 'final' is allowed here and simply prevents further overriding.

Using 'private' or more restrictive access is not allowed in overridden methods.",2025-06-25 19:26:31
308,Working With Java Data Types,Primitive Data Types,"Which of the following data types will allow the following code snippet to compile?

```java
float i = 4;
float j = 2;
_____ z = i + j;

```",long,double,int,float,byte,D,"The result of adding two float variables is a float.

Therefore, the variable 'z' must be of a type that can hold a float value, such as float or double.

Since float is an option and is the most precise type, it is the correct answer.",2025-06-25 19:26:31
309,Java Basics,Import Statements,"Given the following classes, which import statements can be added at line 1 to make the code compile?

```java
package zoo;
public class Zookeeper {}

package zoo.wildlife;
public class Animal {}

package visitor;
// Insert import here

public class Guest {
    public void watch(Animal animal) {}
}

```",import zoo.*;,import zoo.*.wildlife;,import zoo.wildlife.Animal.*;,import zoo.wildlife.Animal;,import zoo.wildlife.*;,D,"To make the code compile, the `Animal` class must be imported.

Option D, `import zoo.wildlife.Animal;`, correctly imports the class.

Option E, `import zoo.wildlife.*;`, would also work, but option D is a more precise import.

Option A only imports classes in the `zoo` package, not subpackages.

Option B has invalid syntax.

Option C is for static imports.",2025-06-25 19:26:31
310,Working With Java Data Types,Primitive Data Types,"What happens when compiling the following code?

```java
1. List<int> list = new ArrayList<>();
2. list.add(21);
3. list.add(13);
4. list.add(30);
5. list.add(11);
6. list.removeIf(o -> o % 2 == 0);
7. System.out.println(list);

```","[21, 13, 11]",[30],[],Compilation fails due to an error at line 1,Compilation fails due to an error at line 10,D,"""Java generics do not support primitive types.

Using 'List<int>' at line 1 causes a compile-time error.

It should be 'List<Integer>'.",2025-06-25 19:26:31
311,Working with Methods and Encapsulation,Method Declaration and Parameters,Assume you have a method which is declared to take four arguments. What will happen if a program calls this method with only two arguments?,"Code compiles successfully. However, in Runtime throws exception.",Compilation fails.,Both 3rd & 4th Argument is given a value zero.,Both 3rd & 4th Argument is given a value null.,None of the above,B,"Java requires the number of arguments in the method call to exactly match the method declaration.

Fewer arguments cause a compile-time error.",2025-06-25 19:26:31
312,Handling Exceptions,Try-Catch-Finally,"What happens when compiling the following code?

```java
1. public class Whizlabs {
2.     public static void main(String[] args) {
3.         try {
4.             Double number = Double.valueOf(""120D"");
5.         } catch (NumberFormatException ex) {
6.             System.out.println(ex);
7.         }
8.         System.out.println(number);
9.     }
10. }

```",120,120D,Run-time exception NumberFormatException is generated,Compilation fails due to an error at line 5,Compilation fails due to an error at line 8,E,"The variable 'number' is declared inside the try block, so its scope is limited to that block.

It is not accessible on line 8, which results in a compile-time error.",2025-06-25 19:26:34
313,Working with Selected Classes from Java API,Lambda Expressions,"Which of the following should be inserted at line 11 to get the output [3, 11]?

```java
List<Integer> list = new ArrayList<>();
list.add(2); list.add(3);
list.add(30); list.add(11);
list.add(2);
// Insert here
System.out.println(list);

```",list.removeIf(o -> o%2 == 0);,list.removeIf(o -> o%2 != 0);,list.remove(2);,list.remove(o -> o%2 == 0);,None of the above,A,"To get the output [3, 11], we need to remove all even numbers from the list.

Option A correctly removes all even numbers using the removeIf method with a lambda expression that checks if the number is even (o % 2 == 0).

Option C is incorrect because `list.remove(2)` would remove the element at index 2 (value 30), not all even numbers.",2025-06-25 19:26:34
314,Working with Selected classes from the Java API,StringBuilder Class,"What is the output of the following code?

```java
StringBuilder s1 = new StringBuilder(""Java"");
String s2 = ""Love"";

s1.append(s2);
s1.substring(4);
int foundAt = s1.indexOf(s2);

System.out.println(foundAt);

```",-1,3,4,StringIndexOutOfBoundsException,Compilation error,C,"The append() method adds ""Love"" to ""Java"", making it ""JavaLove"".

The substring(4) call returns ""Love"" but does not modify s1.

The indexOf(""Love"") finds it starting at index 4.",2025-06-26 11:10:38
315,Working with Methods and Encapsulation,Access Modifiers,Which access modifier makes a member available only to classes within the same package or subclasses?,private,protected,public,package-private,,B,"The protected access modifier allows access within the same package and to subclasses even in other packages.

The private modifier is only within the same class, and package-private doesn't permit subclass access from other packages.",2025-06-26 11:10:38
316,Using Operators and Decision Constructs,Switch Statement,"Which initialization for cardVal will cause the following code to print ""Stand""?\n\n
```java
\nswitch (cardVal) {\n    case 4: case 5: case 6:\n    case 7: case 8:\n        System.out.println(""Hit"");\n        break;\n    case 9: case 10: case 11:\n        System.out.println(""Double"");\n        break;\n    case 15: case 16:\n        System.out.println(""Surrender"");\n        break;\n    default:\n        System.out.println(""Stand"");\n}\n
```",int cardVal = 6;,int cardVal = 10;,int cardVal = 15;,int cardVal = 18;,,D,"The default case is executed for any value of cardVal that is not explicitly handled by one of the case statements.

The values 6, 10, and 15 are handled by specific cases.

Only 18 is not handled, causing ""Stand"" to be printed.",2025-06-26 11:10:38
317,Working with Inheritance,Abstract Classes,Which of the following statements about abstract classes in Java is true?,An abstract class can be instantiated directly,An abstract class must have at least one abstract method,An abstract class can extend another abstract class,An abstract class cannot have any concrete methods,Abstract classes must be final,C,"An abstract class can extend another abstract class.

It may contain abstract and concrete methods, and cannot be instantiated directly.",2025-06-26 18:09:06
318,Working with Inheritance,Abstract Classes,"What happens when compiling the following code?

```java
abstract class Machine {
    abstract void start();
    abstract void stop();
}

abstract class Printer extends Machine {
    void start() {
        System.out.println(""Printer starting"");
    }
}

```",Compilation error,Compiles successfully,Runtime error,Printer must be made final,Machine must not be abstract,B,"✅ Printer compiles successfully because it's still abstract

It implements only start() from Machine, and that’s allowed

Abstract classes don’t have to implement all inherited abstract methods

❌ If Printer were not abstract, it would need to also implement stop(), or else you'd get a compilation error",2025-06-26 18:09:06
319,Working with Inheritance,Abstract Classes,Which statement is correct about abstract classes and interfaces in Java?,Abstract classes can have constructors but interfaces cannot,Abstract classes and interfaces both support multiple inheritance,Interfaces can have private constructors,Abstract classes must have at least one abstract method,Both abstract classes and interfaces can have static methods,A,"Abstract classes can have constructors while interfaces cannot.

This is a key difference between abstract classes and interfaces in Java.",2025-06-26 18:09:06
320,Working with Inheritance,Abstract Classes,"What is the result of compiling and running this code?

```java
abstract class Engine {
    abstract void ignite();
}

class DieselEngine extends Engine {
    void ignite() {
        System.out.println(""Igniting diesel engine"");
    }
}

class Demo {
    public static void main(String[] args) {
        Engine e = new DieselEngine();
        e.ignite();
    }
}

```",Compilation error,Igniting diesel engine,Abstract class cannot be instantiated,No output,Runtime exception,B,"The DieselEngine class implements the abstract method from Engine.

It compiles and runs, printing the message.",2025-06-26 18:09:06
321,Working with Inheritance,Abstract Classes,Which statement is correct regarding abstract methods?,They can have a body,They must be static,They cannot be private,They must be final,They cannot throw exceptions,C,"Abstract methods cannot be private or final.

They must be implemented in a subclass and cannot have a body.",2025-06-26 18:09:06
322,Working with Inheritance,Abstract Classes,Which of the following statements is correct?,A class must be abstract to have abstract methods,A class can be abstract without having any abstract methods,A class can be both abstract and final,An abstract class cannot extend a concrete class,A class with no abstract methods must be concrete,B,A class can be declared abstract even if it doesn't contain any abstract methods.,2025-06-26 18:09:06
323,Working with Inheritance,Abstract Classes,"What is the output of this code?

```java
abstract class Writer {
    public abstract void write();
}

class Pen extends Writer {
    public void write() {
        System.out.println(""Writing with a pen"");
    }
}

public class Test {
    public static void main(String[] args) {
        Writer w = new Pen();
        w.write();
    }
}

```",Writing with a pen,Compilation error,Runtime error,No output,Abstract class cannot be instantiated,A,"The Pen class implements the abstract method `write()` from Writer.

The code compiles and runs, printing 'Writing with a pen'.",2025-06-26 18:09:06
324,Working with Inheritance,Abstract Classes,"What is the output of the following code?

```java
abstract class Shape {
    abstract void draw();
    void print() {
        System.out.println(""Printing shape"");
    }
}

class Circle extends Shape {
    void draw() {
        System.out.println(""Drawing circle"");
    }
}

public class Test {
    public static void main(String[] args) {
        Shape s = new Circle();
        s.print();
    }
}

```",Printing shape,Drawing circle,Drawing circle then Printing shape,Printing shape then Drawing circle,Compilation error,A,"The print() method is concrete and will execute.

Although draw() is implemented, it is never called.",2025-06-26 18:09:06
325,Working with Inheritance,Abstract Classes,"What will happen when compiling the following code?

```java
abstract class Animal {
    abstract void speak();
}

class Dog extends Animal { }

```",Compiles and runs successfully,Compilation error due to missing method implementation in Dog,Runs with a runtime exception,Dog must be declared abstract,Compilation error in abstract class definition,B,"Since Dog does not implement the abstract method `speak()`, it must either be declared abstract or implement the method.",2025-06-26 18:09:06
326,Working with Inheritance,Abstract Classes,Choose the correct statement about abstract classes.,Abstract classes cannot have constructors,You cannot have abstract methods without declaring the class abstract,Abstract classes cannot implement interfaces,An abstract class must be public,Abstract classes cannot extend other classes,B,"Abstract methods must reside inside an abstract class.

However, abstract classes can have constructors and can implement interfaces.",2025-06-26 18:09:06