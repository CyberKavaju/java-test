ID,Domain,Topic,Question,Option A,Option B,Option C,Option D,Option E,Correct Answer,Explanation,Created At,Question Type
257,Working with Selected classes from the Java API,Map Object,"Which of the following is a legacy synchronized map?",HashMap,TreeMap,LinkedHashMap,Hashtable,EnumMap,D,"`Hashtable` is a legacy class and thread-safe by default.",2025-06-20 19:57:15,single
258,Working with Selected classes from the Java API,Map Object,"Which statement is TRUE about `putIfAbsent()`?",Replaces existing value,Deletes the value if present,Only inserts if key is not present,Throws exception if key exists,Same as `put()`,C,"`putIfAbsent()` only inserts if the key is missing.",2025-06-20 19:57:15,single
259,Working with Selected classes from the Java API,Map Object,"What does `getOrDefault(key, defaultVal)` do?",Always returns defaultVal,Throws if key is missing,Returns value if present, otherwise default,Returns Optional,None of the above,C,"Returns associated value if key exists, otherwise the provided default value.",2025-06-20 19:57:15,single
260,Working with Selected classes from the Java API,Map Object,"What will this print?
```java
Map<String, String> map = new TreeMap<>();
map.put(""B"", ""Banana"");
map.put(""A"", ""Apple"");
System.out.println(map);
```","{B=Banana, A=Apple}","{A=Apple, B=Banana}",Random order,Compilation error,Runtime exception,B,"`TreeMap` keeps keys sorted.
Output will be in key order: `{A=Apple, B=Banana}`.",2025-06-20 19:57:15
261,Working with Selected classes from the Java API,Map Object,"What is the output of the following code?
```java
Map<String, Integer> map = new HashMap<>();
map.put(""A"", 1);
map.put(""A"", 2);
System.out.println(map.get(""A""));
```",1,2,null,Compilation error,Runtime exception,B,"The second `put` replaces the first value.
The output is `2`.",2025-06-20 19:57:15
262,Working with Selected classes from the Java API,Map Object,"Which method returns a `Set` of key-value mappings in a `Map`?",keySet(),entrySet(),values(),pairs(),mapItems(),B,"`entrySet()` returns a `Set<Map.Entry<K, V>>` of key-value pairs.",2025-06-20 19:57:15,single
263,Working with Selected classes from the Java API,Map Object,"Which of the following methods is used to loop through a map efficiently in Java 8?",map.each(),for(map),map.entries(),map.forEach(),map.iterate(),D,"`forEach(BiConsumer)` is the Java 8 idiomatic way to loop over a map.",2025-06-20 19:57:15,single
264,Working with Selected classes from the Java API,Map Object,"Which method removes all entries from a map?",empty(),clear(),reset(),nullify(),drop(),B,"`clear()` is used to remove all key-value pairs from a map.",2025-06-20 19:57:15,single
265,Working with Selected classes from the Java API,Map Object,"Choose the correct import statement for `ConcurrentHashMap`.",import java.util.ConcurrentHashMap;,import java.concurrent.ConcurrentHashMap;,import java.util.concurrent.ConcurrentHashMap;,import concurrent.ConcurrentHashMap;,import map.ConcurrentHashMap;,C,"`ConcurrentHashMap` is part of the `java.util.concurrent` package.",2025-06-20 19:57:15,single
266,Working with Selected classes from the Java API,Map Object,"What is the return type of `values()` in Map?",List,Collection,Array,Set,Map,B,"`values()` returns a `Collection<V>` of all values in the map.",2025-06-20 19:57:15,single
267,Working with Selected classes from the Java API,Map Object,"Which method checks if a map is empty?",hasEntries(),size() == 0,isEmpty(),length() == 0,None of the above,C,"`isEmpty()` returns true if the map contains no entries.",2025-06-20 19:57:15,single
268,Working with Selected classes from the Java API,Map Object,"Which of these methods exist in the `Map` interface?",push(), pop(), peek(),add(), remove(), size(),put(), get(), remove(),insert(), delete(), select(),append(), prepend(),C,"`put()`, `get()` and `remove()` are standard Map operations.",2025-06-20 19:57:15,single
269,Working with Selected classes from the Java API,Map Object,"Which `Map` implementation does NOT allow `null` keys or values?",HashMap,TreeMap,Hashtable,LinkedHashMap,ConcurrentHashMap,E,"Both `Hashtable` and `ConcurrentHashMap` do not allow null keys or values.",,single
However, `ConcurrentHashMap` is the more modern choice for concurrent access.",2025-06-20 19:57:15
270,Working with Selected classes from the Java API,Map Object,"What is the output?
```java
Map<String, String> m = new LinkedHashMap<>();
m.put(""x"", ""1"");
m.put(""y"", ""2"");
System.out.println(m);
```","{y=2, x=1}","{x=1, y=2}",Random order,Runtime error,Compilation error,B,"`LinkedHashMap` preserves insertion order, so the output is `{x=1, y=2}`.",2025-06-20 19:57:15
271,Working with Selected classes from the Java API,Map Object,"Which map implementation is best for a memory-sensitive cache?",TreeMap,IdentityHashMap,EnumMap,WeakHashMap,ConcurrentHashMap,D,"`WeakHashMap` allows keys to be GC'd â€” great for memory-sensitive caching.",2025-06-20 19:57:15,single
272,Working with Selected classes from the Java API,Map Object,"Which of these will cause a `NullPointerException` in a `TreeMap`?",null value,duplicate value,null key,null entry,empty key,C,"`TreeMap` does not allow `null` keys, as it uses `compareTo()` internally.",2025-06-20 19:57:15,single
273,Working with Selected classes from the Java API,Map Object,"What does `entrySet()` return?",Map,List,Set of keys,Set of values,Set of entries,E,"`entrySet()` returns a `Set<Map.Entry<K, V>>` representing all key-value pairs.",2025-06-20 19:57:15,single
274,Working with Selected classes from the Java API,Map Object,"Which map does NOT guarantee ordering of keys or entries?",TreeMap,LinkedHashMap,HashMap,EnumMap,All do,C,"`HashMap` has no guarantees about key or entry order.",2025-06-20 19:57:15,single
275,Working with Selected classes from the Java API,Map Object,"Which method returns an unmodifiable view of a `Map`?",HashMap,ConcurrentHashMap,TreeMap,Collections.unmodifiableMap(),Map.copyOf(),D,"`Collections.unmodifiableMap()` creates an unmodifiable view of the specified map.",,single
This is available in Java SE 8.",2025-06-20 19:57:15
276,Working with Selected classes from the Java API,Map Object,"Which method is used to safely compute a value only if key is absent?",compute(),putIfPresent(),computeIfAbsent(),merge(),addOrCreate(),C,"`computeIfAbsent()` adds a value only if the key isn't already present.",2025-06-20 19:57:15,single
277,Working with Selected classes from the Java API,Map Object,"Which statement about `WeakHashMap` is correct?",Keys are garbage collected if weakly reachable,It sorts keys,It doesn't allow nulls,It's faster than HashMap,It's thread-safe,A,"`WeakHashMap` allows keys to be GC'd when no strong refs exist.",2025-06-20 19:57:15,single
278,Working with Selected classes from the Java API,Map Object,"What interface does `TreeMap` implement in addition to `Map`?",NavigableMap,SortedSet,HashableMap,Queue,SerializableMap,A,"`TreeMap` implements `NavigableMap` for range and sorted operations.",2025-06-20 19:57:15,single
279,Working with Selected classes from the Java API,Map Object,"What is the default return of `get()` if the key doesn't exist?",null,false,0,exception,empty string,A,"`get()` returns `null` if the key is not present.",2025-06-20 19:57:15,single
280,Working with Selected classes from the Java API,Map Object,"What does `replaceAll()` do in a `Map`?",Deletes all values,Applies a function to each entry,Converts map to immutable,Replaces keys,Throws error,B,"`replaceAll()` applies a remapping function to all key-value pairs.",2025-06-20 19:57:15,single
281,Java 8 Features,Lambda Expressions,"Which of the following is a correct lambda syntax with one parameter and no type declaration?",x -> x + 1,(int x) => x + 1,x => x + 1,(x): x + 1,x -> return x + 1,A,"For a single parameter with no type, parentheses are optional. 'x -> x + 1' is valid syntax.",2025-06-22 00:03:12,single
282,Java 8 Features,Lambda Expressions,"Which of these is NOT a valid lambda?",() -> System.out.println(""Hi""),(a, b) -> a + b,x -> return x * 2;,x -> x * x,(int x) -> { return x; },C,"The 'return' keyword requires a block body (using `{}`).",single,single
The expression `x -> return x * 2;` is invalid because it mixes expression syntax with a `return` statement.
It should be either `x -> x * 2` or `x -> { return x * 2; }`.",2025-06-22 00:03:12
283,Java 8 Features,Lambda Expressions,"Which lambda expression correctly returns true if a string is empty?",s -> s.length() == 0,(s) -> return s == null;,s => s.equals(""),(String s) => s.isEmpty(),() -> s.isEmpty(),A,"A valid lambda to test string emptiness is 's -> s.length() == 0' or 's -> s.isEmpty()'.",,single
Option A uses correct syntax and logic.",2025-06-22 00:03:12
284,Java 8 Features,Lambda Expressions,"Which statement about lambda expressions in Java is true?",They can have multiple abstract methods,They are valid only inside classes,They implement functional interfaces,They must always use return keyword,They are only used in interfaces,C,"Lambdas work with functional interfaces, which have exactly one abstract method.",2025-06-22 00:03:12,single
285,Java 8 Features,Lambda Expressions,"Which of the following interfaces is NOT functional?",Runnable,Comparator,Function,Thread,Predicate,D,"`Thread` is a class, not a functional interface.",,single
Others each have one abstract method.",2025-06-22 00:03:12
286,Java 8 Features,Lambda Expressions,"Choose the correct syntax for a lambda with no parameters.",() -> return 10,-> 10,() -> 10,return () -> 10,{} -> 10,C,"No parameter lambdas must include `()`.",,single
Correct form is `() -> 10`.",2025-06-22 00:03:12
287,Java 8 Features,Lambda Expressions,"Which method must be implemented in a `Runnable` lambda?",void start(),void go(),void execute(),void run(),void accept(),D,"`Runnable` has one method: `void run()`.",,single
Lambdas for `Runnable` must implement this.",2025-06-22 00:03:12
288,Java 8 Features,Lambda Expressions,"What does the following code print?
```java
Predicate<String> p = s -> s.isEmpty();
System.out.println(p.test(""""));
```",false,true,null,Compilation error,Runtime exception,B,"The empty string is passed to the predicate.
Since it is empty, `isEmpty()` returns true.",2025-06-22 00:03:12
289,Java 8 Features,Lambda Expressions,"Which lambda expression has a syntax error?",(a, b) -> a + b,x -> x * 2,(x) -> { return x + 1; },a, b -> a + b,() -> System.out.println(""Hello""),D,"You must use parentheses around parameters when there are two or more: '(a, b) -> a + b' is correct, 'a, b -> a + b' is not.",2025-06-22 00:03:12,single
290,Java 8 Features,Lambda Expressions,"Which of the following is true about functional interfaces?",They must have more than one abstract method,They can have no abstract methods,They can have one abstract method only,They cannot have default methods,They must return void,C,"Functional interfaces must have exactly one abstract method.",,single
They can have default or static methods too.",2025-06-22 00:03:12
291,Java 8 Features,Lambda Expressions,"What is the return type of a lambda implementing `Supplier<String>`?",boolean,int,void,String,Object,D,"`Supplier<T>` provides a result of type `T`.",,single
For `Supplier<String>`, return type is `String`.",2025-06-22 00:03:12
292,Java 8 Features,Lambda Expressions,"Which functional interface is best used to return a value based on input?",Predicate,Consumer,Runnable,Function,Comparator,D,"`Function<T, R>` takes input and returns a result.",,single
Perfect for transformation use cases.",2025-06-22 00:03:12
293,Java 8 Features,Lambda Expressions,"Which of these best describes the role of a lambda in Java?",It replaces loops,It enables multithreading,It allows passing behavior as data,It returns multiple values,It creates annotations,C,"Lambdas allow behavior (code blocks) to be passed as data, typically to methods.",2025-06-22 00:03:12,single
294,Java 8 Features,Lambda Expressions,"What is the output?
```java
Function<Integer, Integer> square = x -> x * x;
System.out.println(square.apply(5));
```",25,10,5,Compilation error,Runtime exception,A,5 squared is 25. `Function.apply()` returns the transformed value.,2025-06-22 00:03:12
295,Java 8 Features,Lambda Expressions,"What is the output of the following code?
```java
Consumer<String> c = s -> System.out.println(s.toUpperCase());
c.accept(""lambda"");
```",lambda,LAMBDA,null,Compilation error,Runtime exception,B,The lambda converts the string to upper case: output is 'LAMBDA'.,2025-06-22 00:03:12