domain,topic,question_text,option_a,option_b,option_c,option_d,option_e,correct_answer,explanation
Working with Selected classes from the Java API,Map Object,"Which `Map` implementation maintains the insertion order of entries?","HashMap","TreeMap","LinkedHashMap","ConcurrentHashMap","EnumMap",C,"`LinkedHashMap` maintains the insertion order of keys. `HashMap` does not. `TreeMap` sorts keys. `ConcurrentHashMap` and `EnumMap` have no guaranteed insertion order."
Working with Selected classes from the Java API,Map Object,"What happens when you try to retrieve a value for a key that does not exist in a `HashMap`?","The method throws an exception","Returns -1","Returns null","Returns Optional.empty()","Compilation error",C,"If a key is not present in a HashMap, the `get()` method returns `null`. It does not throw an exception or return -1 by default."
Working with Selected classes from the Java API,Map Object,"Which of the following maps is most suitable for concurrent access by multiple threads?","Hashtable","HashMap","ConcurrentHashMap","TreeMap","LinkedHashMap",C,"`ConcurrentHashMap` is designed for high-concurrency environments. `Hashtable` is synchronized but inefficient. `HashMap`, `TreeMap`, and `LinkedHashMap` are not thread-safe."
Working with Selected classes from the Java API,Map Object,"What is the output of the following code? 
Map<String, Integer> map = new HashMap<>();
map.put(""A"", 1);
map.put(""A"", 2);
System.out.println(map.get(""A""));","1","2","null","Compilation error","Runtime exception",B,"The second `put` replaces the first value. The output is `2`."
Working with Selected classes from the Java API,Map Object,"Which `Map` implementation does NOT allow `null` keys or values?","HashMap","TreeMap","Hashtable","LinkedHashMap","ConcurrentHashMap",E,"Both `Hashtable` and `ConcurrentHashMap` do not allow null keys or values. However, `ConcurrentHashMap` is the more modern choice for concurrent access."
Working with Selected classes from the Java API,Map Object,"What will this print?
Map<String, String> map = new TreeMap<>();
map.put(""B"", ""Banana"");
map.put(""A"", ""Apple"");
System.out.println(map);","{B=Banana, A=Apple}","{A=Apple, B=Banana}","Random order","Compilation error","Runtime exception",B,"`TreeMap` keeps keys sorted. Output will be in key order: `{A=Apple, B=Banana}`."
Working with Selected classes from the Java API,Map Object,"Which map uses `==` instead of `.equals()` to compare keys?","EnumMap","TreeMap","IdentityHashMap","WeakHashMap","HashMap",C,"`IdentityHashMap` compares keys using reference equality (`==`)."
Working with Selected classes from the Java API,Map Object,"Which implementation is designed to store enum constants as keys efficiently?","TreeMap","EnumMap","HashMap","LinkedHashMap","Properties",B,"`EnumMap` is specifically designed for enum key efficiency."
Working with Selected classes from the Java API,Map Object,"What is the result of calling `map.clear()` on a populated map?","All values become null","Keys are set to null","All entries are removed","Map becomes immutable","It throws an exception",C,"`clear()` removes all entries from the map — size becomes zero."
Working with Selected classes from the Java API,Map Object,"Which of the following is a legacy synchronized map?","HashMap","TreeMap","LinkedHashMap","Hashtable","EnumMap",D,"`Hashtable` is a legacy class and thread-safe by default."
Working with Selected classes from the Java API,Map Object,"Which statement is TRUE about `putIfAbsent()`?","Replaces existing value","Deletes the value if present","Only inserts if key is not present","Throws exception if key exists","Same as `put()`",C,"`putIfAbsent()` only inserts if the key is missing."
Working with Selected classes from the Java API,Map Object,"What does `getOrDefault(key, defaultVal)` do?","Always returns defaultVal","Throws if key is missing","Returns value if present, otherwise default","Returns Optional","None of the above",C,"Returns associated value if key exists, otherwise the provided default value."
Working with Selected classes from the Java API,Map Object,"Which statement about `WeakHashMap` is correct?","Keys are garbage collected if weakly reachable","It sorts keys","It doesn't allow nulls","It’s faster than HashMap","It's thread-safe",A,"`WeakHashMap` allows keys to be GC'd when no strong refs exist."
Working with Selected classes from the Java API,Map Object,"Choose the correct import statement for `ConcurrentHashMap`.","import java.util.ConcurrentHashMap;","import java.concurrent.ConcurrentHashMap;","import java.util.concurrent.ConcurrentHashMap;","import concurrent.ConcurrentHashMap;","import map.ConcurrentHashMap;",C,"`ConcurrentHashMap` is part of the `java.util.concurrent` package."
Working with Selected classes from the Java API,Map Object,"Which method returns a `Set` of key-value mappings in a `Map`?","keySet()","entrySet()","values()","pairs()","mapItems()",B,"`entrySet()` returns a `Set<Map.Entry<K, V>>` of key-value pairs."
Working with Selected classes from the Java API,Map Object,"Which of the following methods is used to loop through a map efficiently in Java 8?","map.each()","for(map)","map.entries()","map.forEach()","map.iterate()",D,"`forEach(BiConsumer)` is the Java 8 idiomatic way to loop over a map."
Working with Selected classes from the Java API,Map Object,"Which method removes all entries from a map?","empty()","clear()","reset()","nullify()","drop()",B,"`clear()` is used to remove all key-value pairs from a map."
Working with Selected classes from the Java API,Map Object,"What does `replaceAll()` do in a `Map`?","Deletes all values","Applies a function to each entry","Converts map to immutable","Replaces keys","Throws error",B,"`replaceAll()` applies a remapping function to all key-value pairs."
Working with Selected classes from the Java API,Map Object,"What is the return type of `values()` in Map?","List","Collection","Array","Set","Map",B,"`values()` returns a `Collection<V>` of all values in the map."
Working with Selected classes from the Java API,Map Object,"Which method checks if a map is empty?","hasEntries()","size() == 0","isEmpty()","length() == 0","None of the above",C,"`isEmpty()` returns true if the map contains no entries."
Working with Selected classes from the Java API,Map Object,"What is the output?
Map<String, String> m = new LinkedHashMap<>();
m.put(""x"", ""1"");
m.put(""y"", ""2"");
System.out.println(m);","{y=2, x=1}","{x=1, y=2}","Random order","Runtime error","Compilation error",B,"`LinkedHashMap` preserves insertion order, so the output is `{x=1, y=2}`."
Working with Selected classes from the Java API,Map Object,"Which of these methods exist in the `Map` interface?","push(), pop(), peek()","add(), remove(), size()","put(), get(), remove()","insert(), delete(), select()","append(), prepend()",C,"`put()`, `get()` and `remove()` are standard Map operations."
Working with Selected classes from the Java API,Map Object,"What is the default return of `get()` if the key doesn’t exist?","null","false","0","exception","empty string",A,"`get()` returns `null` if the key is not present."
Working with Selected classes from the Java API,Map Object,"What interface does `TreeMap` implement in addition to `Map`?","NavigableMap","SortedSet","HashableMap","Queue","SerializableMap",A,"`TreeMap` implements `NavigableMap` for range and sorted operations."
Working with Selected classes from the Java API,Map Object,"Which map implementation is best for a memory-sensitive cache?","TreeMap","IdentityHashMap","EnumMap","WeakHashMap","ConcurrentHashMap",D,"`WeakHashMap` allows keys to be GC'd — great for memory-sensitive caching."
Working with Selected classes from the Java API,Map Object,"Which of these will cause a `NullPointerException` in a `TreeMap`?","null value","duplicate value","null key","null entry","empty key",C,"`TreeMap` does not allow `null` keys, as it uses `compareTo()` internally."
Working with Selected classes from the Java API,Map Object,"What does `entrySet()` return?","Map","List","Set of keys","Set of values","Set of entries",E,"`entrySet()` returns a `Set<Map.Entry<K, V>>` representing all key-value pairs."
Working with Selected classes from the Java API,Map Object,"Which map does NOT guarantee ordering of keys or entries?","TreeMap","LinkedHashMap","HashMap","EnumMap","All do",C,"`HashMap` has no guarantees about key or entry order."
Working with Selected classes from the Java API,Map Object,"Which method returns an unmodifiable view of a `Map`?","HashMap","ConcurrentHashMap","TreeMap","Collections.unmodifiableMap()","Map.copyOf()",D,"`Collections.unmodifiableMap()` creates an unmodifiable view of the specified map. This is available in Java SE 8."
Working with Selected classes from the Java API,Map Object,"Which method is used to safely compute a value only if key is absent?","compute()","putIfPresent()","computeIfAbsent()","merge()","addOrCreate()",C,"`computeIfAbsent()` adds a value only if the key isn’t already present."
